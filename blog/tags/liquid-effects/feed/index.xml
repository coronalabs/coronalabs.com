<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>liquid effects &#8211; Corona Labs</title>
	<atom:link href="/blog/tags/liquid-effects/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Mon, 19 Oct 2020 12:16:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>/wordpress/wp-content/uploads/2017/06/cropped-icon_32x32@2x-32x32.png</url>
	<title>liquid effects &#8211; Corona Labs</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Tutorial: Creating awesome water with LiquidFun, snapshots, and filters</title>
		<link>/blog/2015/09/24/tutorial-creating-awesome-water-with-liquidfun-snapshots-and-filters/</link>
		<comments>/blog/2015/09/24/tutorial-creating-awesome-water-with-liquidfun-snapshots-and-filters/#comments</comments>
		<pubDate>Thu, 24 Sep 2015 20:29:12 +0000</pubDate>
		<dc:creator><![CDATA[Brent Sorrentino]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[liquid effects]]></category>
		<category><![CDATA[LiquidFun]]></category>
		<category><![CDATA[physics]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">/?p=64081</guid>
		<description><![CDATA[Following the worldwide success of “Freeze! - The Escape,” Frozen Gun Studios has just released the sequel, “Freeze! 2 - Brothers,” built entirely in Corona SDK. This tutorial illustrates how to create awesome water with LiquidFun, snapshots, and filters.]]></description>
				<content:encoded><![CDATA[<p><em>This tutorial comes to you courtesy of Andreas von Lepel of <a href=http://www.frozengun.com/ target="_blank">Frozen Gun Studios</a>. Following the worldwide success of “Freeze! &#8211; The Escape” (<a href=https://itunes.apple.com/us/app/freeze%21/id518123684?mt=8 target="_blank">iOS</a>/<a href=https://play.google.com/store/apps/details?id=com.frozengun.freeze target="_blank">Android</a>) with more than <strong>11 million</strong> freemium downloads, Frozen Gun Studios has just released the sequel, “Freeze! 2 &#8211; Brothers” (<a href=https://itunes.apple.com/app/freeze!-2-brothers/id904424939?mt=8 target="_blank">iOS</a>/<a href=https://play.google.com/store/apps/details?id=com.frozengun.freeze2.google target="_blank">Android</a>), built entirely in Corona SDK and featuring LiquidFun-based water effects.</em></p>
<hr />
<h3>Overview</h3>
<p>Very early in the development, I decided that it would be really interesting for the gameplay if I could have water and poisonous liquids like rocket fuel sloshing around in the rotating levels. Have a look at the trailer to see what we did:</p>
<p><iframe width="1060" height="596" src="https://www.youtube.com/embed/kbAwJtuRV0U?feature=oembed" frameborder="0" gesture="media" allowfullscreen></iframe></p>
<p>As you can see, both our heroes can swim in the water, but in later stages the task for the player is to first collect all the deadly rocket fuel into a barrel and then to pick it up to open the level exit.</p>
<h3>Project code</h3>
<p>Setting up a scene with basic water using LiquidFun is really easy and there are some nice examples included in the Corona <a href=https://github.com/coronalabs/samples-coronasdk/tree/master/Physics target="_blank">SampleCode repository</a>. However, creating really nice, transparent water with a visible &#8220;surface&#8221; is a little harder and you need to use snapshots and filters. Fortunately, as usual with Corona SDK, even complex stuff is mostly done for you by the engine.</p>
<p>As we step through this tutorial, I encourage you to download the <a href=https://github.com/coronalabs/samples-coronasdk/tree/master/Physics/LiquidFun-Transparency target="_blank">LiquidFun-Transparency</a> project in the GitHub repository, also bundled into recent builds of Corona SDK:</p>
<p><code>CoronaSDK-XXXX</code> → <code>SampleCode</code> → <code>Physics</code> → <code>LiquidFun-Transparency</code></p>
<p>Within the project folder, open the <code>main.lua</code> file. We&#8217;ll start with the basic world setup:</p>
<h4>Liquid &#8220;container&#8221;</h4>
<p></p><pre class="crayon-plain-tag">-- Add three physics objects as borders for the simulated liquid, located outside the visible screen
local leftSide = display.newRect( worldGroup, -54-letterboxWidth, display.contentHeight-180, 600, 70 )
physics.addBody( leftSide, &quot;static&quot; )
leftSide.rotation = 86

local centerPiece = display.newRect( worldGroup, display.contentCenterX, display.contentHeight+60+letterboxHeight, 440, 120 )
physics.addBody( centerPiece, &quot;static&quot; )

local rightSide = display.newRect( worldGroup, display.contentWidth+54+letterboxWidth, display.contentHeight-180, 600, 70 )
physics.addBody( rightSide, &quot;static&quot; )
rightSide.rotation = -86</pre><p>In this block, I use three static rectangles to build a container outside of the screen boundaries. The container is open at the top and it will later hold the water inside of the screen.</p>
<h4>Scrolling background</h4>
<p>I want even demos to look nice, so in the next block, I add an endless scrolling background by placing two identical background images adjacent to each other, one fully visible in the middle of the screen, the other to the right of it.</p><pre class="crayon-plain-tag">-- Create an endless scrolling background, using background image from &quot;Freeze!&quot;
local background1 = display.newImageRect( worldGroup, &quot;background.png&quot;, 320, 480 )
background1.x = 160
background1.y = 240
background1.xScale = 1.202
background1.yScale = 1.200
transition.to( background1, { time=12000, x=-224, iterations=0 } )

local background2 = display.newImageRect( worldGroup, &quot;background.png&quot;, 320, 480 )
background2.x = 544
background2.y = 240
background2.xScale = 1.202
background2.yScale = 1.200
transition.to( background2, { time=12000, x=160, iterations=0 } )</pre><p>Note that both images are moved slowly to the left and then, via endless iterations, are set back to their original positions and moved again, all using simple <a href=https://docs.coronalabs.com/api/library/transition/index.html target="_blank">transition.to()</a> calls.</p>
<h4>The hero</h4>
<p>Next, I add our eye hero into the scene as a dynamic physics object that will swim on the water. It can also be touched and dragged around by the user. I will not dive into the touch-drag code, about which a lot has been written and demonstrated previously.</p><pre class="crayon-plain-tag">-- Create our eye (the hero of &quot;Freeze!&quot;)
local hero = display.newImageRect( worldGroup, &quot;hero.png&quot;, 64, 64 )
hero.x = 160
hero.y = -400
physics.addBody( hero, { density=0.7, friction=0.3, bounce=0.2, radius=30 } )

-- Make hero draggable via a touch handler and physics touch joint
local function dragBody( event )
    local body = event.target
    local phase = event.phase

    if ( &quot;began&quot; == phase ) then
        display.getCurrentStage():setFocus( body, event.id )
        body.isFocus = true
        body.tempJoint = physics.newJoint( &quot;touch&quot;, body, event.x, event.y )
        body.isFixedRotation = true
    elseif ( body.isFocus ) then
        if ( &quot;moved&quot; == phase ) then
            body.tempJoint:setTarget( event.x, event.y )
        elseif ( &quot;ended&quot; == phase or &quot;cancelled&quot; == phase ) then
            display.getCurrentStage():setFocus( body, nil )
            body.isFocus = false
            event.target:setLinearVelocity( 0,0 )
            event.target.angularVelocity = 0
            body.tempJoint:removeSelf()
            body.isFixedRotation = false
        end
    end
    return true
end
hero:addEventListener( &quot;touch&quot;, dragBody )</pre><p></p>
<h4>LiquidFun particle system and water</h4>
<p>In the next block, the particle system for the water is created, and a big rectangle of water particles is placed into the scene. </p>
<p></p><pre class="crayon-plain-tag">-- Create the LiquidFun particle system for the water
local particleSystem = physics.newParticleSystem{
    filename = &quot;liquidParticle.png&quot;,
    radius = 3,
    imageRadius = 5,
    gravityScale = 1.0,
    strictContactCheck = true
}

-- Create a &quot;block&quot; of water (LiquidFun group)
particleSystem:createGroup(
    {
        flags = { &quot;tensile&quot; },
        x = 160,
        y = 0,
        color = { 0.1, 0.1, 0.1, 1 },
        halfWidth = 128,
        halfHeight = 256
    }
)</pre><p>And this is the result if you start the code now:</p>
<p><center><img class="wp-image-64126 alignnone" style="margin-bottom: 18px;" src="/wordpress/wp-content/uploads/2015/09/LiquidFunDemo01.png" alt="LiquidFunDemo01" width="300" height="615" /><br />
<em>The water is flowing, but it&#8217;s more like oil, because there is no transparency yet.</em></center></p>
<h4>Adding transparency (first attempt)</h4>
<p>Now things get a little more complex. I want to render the water semi-transparent, e.g. with an alpha value of <code>0.3</code> (30%) so that the background is visible through the water.</p>
<p>If I change the last value (alpha) of the the <code>color</code> property on line <code>111</code>, there will be some transparency, but not exactly what I&#8217;m looking for:</p>
<p><center><img class="alignnone wp-image-64127" style="margin-bottom: 18px;" src="/wordpress/wp-content/uploads/2015/09/LiquidFunDemo02.png" alt="LiquidFunDemo02" width="300" height="615" /><br />
<em>Each particle now has an alpha value of 30%.</em></center>If you look closely at the image, you can see that each round particle now has an alpha value of <code>0.3</code>, and this gives a chaotic rendering of the water because all of the particles overlap slightly. While this could be nice effect for certain cases, it&#8217;s definitely not what I am trying to achieve.</p>
<h4>Adding transparency using a snapshot</h4>
<p>The solution is to render all the particles into a <a href=https://docs.coronalabs.com/api/library/display/newSnapshot.html target="_blank">snapshot</a> texture on each frame and then apply transparency to the entire texture. Here are the relevant lines:</p><pre class="crayon-plain-tag">-- Initialize snapshot for full screen
local snapshot = display.newSnapshot( worldGroup, 320+letterboxWidth+letterboxWidth, 480+letterboxHeight+letterboxHeight )
local snapshotGroup = snapshot.group
snapshot.x = 160
snapshot.y = 240
snapshot.canvasMode = &quot;discard&quot;
snapshot.alpha = 0.3</pre><p></p><pre class="crayon-plain-tag">-- Insert the particle system into the snapshot
snapshotGroup:insert( particleSystem )
snapshotGroup.x = -160
snapshotGroup.y = -240</pre><p></p><pre class="crayon-plain-tag">-- Update (invalidate) the snapshot each frame
local function onEnterFrame( event )
    snapshot:invalidate()
end
Runtime:addEventListener( &quot;enterFrame&quot;, onEnterFrame )</pre><p>Essentially, a snapshot and its group are created, positioned in the center of the content area. Note that the width and height of the snapshot are adjusted by the <code>letterboxWidth</code> and <code>letterboxHeight</code> variables calculated earlier in <code>main.lua</code> &#8212; this ensures that, when running in <code>"letterbox"</code> scale mode, the snapshot occupies the entire screen on devices of various aspect ratios.</p>
<p>On line <code>123</code>, I set the alpha value of the entire snapshot to <code>0.3</code>, effectively setting the entire snapshot texture to 30% opacity. Following this, the particle system is inserted into the snapshot group and finally, with the help of an <code>"enterFrame"</code> listener, the snapshot is invalidated and rendered anew each frame.</p>
<p>With this addition, you can see that the water now has realistic transparency:</p>
<p><center><img class="alignnone wp-image-64128" style="margin-bottom: 18px;" src="/wordpress/wp-content/uploads/2015/09/LiquidFunDemo03.png" alt="LiquidFunDemo03" width="300" height="615" /><br />
<em>Transparency! At last!</em></center></p>
<h4>Go for pretty and add a filter</h4>
<p>After I got this far, I was quite happy. But the cool engineers at Corona Labs added <a href=https://docs.coronalabs.com/guide/graphics/effects.html target="_blank">filter</a> support, so I started to experiment a lot with all of the filters and filter options in my quest to add a nice visible surface to the water. It took some time to achieve the correct look, but in the end it was really easy:</p><pre class="crayon-plain-tag">-- Apply a &quot;sobel&quot; filter to portray the visible surface of the water
snapshot.fill.effect = &quot;filter.sobel&quot;</pre><p>And that&#8217;s it, we now have water with transparency and a nice water surface!</p>
<p><center><img class="alignnone wp-image-64129" style="margin-bottom: 18px;" src="/wordpress/wp-content/uploads/2015/09/LiquidFunDemo04.png" alt="LiquidFunDemo04" width="300" height="615" /><br />
<em>The water &#8220;surface&#8221; shows as a visible line on top of the water<br />
(the edge of the rendered water enhanced by the sobel filter).</em></center></p>
<h4>Where to go from here</h4>
<p>From here, there are a lot of experiments you can do, e.g. play around with the density of the hero eye (with this you can influence whether it should be very light and always float on top of the water, or whether it should be heavy and sink below).</p>
<p>Another option is to use different filters for the water and tune their respective filter settings:</p>
<ul>
<li><code>snapshot.fill.effect = "filter.emboss"</code></li>
<li><code>snapshot.fill.effect = "filter.frostedGlass"</code></li>
<li><code>snapshot.fill.effect = "filter.crystallize"</code></li>
<li><code>snapshot.fill.effect = "filter.scatter"</code></li>
</ul>
<p>Finally, don&#8217;t forget the many different &#8220;flags&#8221; you can use for the LiquidFun group &#8212; e.g. add <code>"staticPressure"</code> and the water particles at the bottom of the container will not be compressed.</p>
<h3>Performance issues</h3>
<p>Not all devices are powerful enough to display water with these added special effects while maintaining an acceptable frame rate. Because of this, I take the following precautions:</p>
<ul>
<li>On iOS, I use the snapshot on all supported devices (iPhone 4S and better; iPad 2 and better). However, the additional sobel filter is added only on more powerful devices like the iPad Air or iPad mini 2 (iPad4,*), iPhone 5S (iPhone6,1), or iPod Touch 5G (iPod5,1) and better.</li>
<li>For Android, I set the <code>minSdkVersion</code> to <code>"16"</code> (Android 4.1) to exclude many older devices. Also, I use the sobel filter only on devices that support high precision shaders, as determined by this:<br />
<code>system.getInfo( "gpuSupportsHighPrecisionFragmentShaders" )</code></li>
<li>Finally, I test the <code>system.getInfo( "androidDisplayDensityName" )</code> for <code>"xhdpi"</code>, <code>"xxhdpi"</code>, and <code>"xxxhdpi"</code> &#8212; only these devices will get the sobel filter, because they are quite modern and should hopefully be fast enough.</li>
</ul>
<h3>Conclusion</h3>
<p>As you can see, it is quite easy to create nice-looking water and other liquids, and at last the technology is good enough to make all of this useable on modern mobile devices. I&#8217;m looking forward to seeing more games which make use of this, as liquids are great fun for players and developers alike.</p>
<p>If you want to learn more about “Freeze! 2 – Brothers,” visit <a href=http://www.freeze2.com/ target="_blank">www.freeze2.com</a>, or download it for either <a href=https://itunes.apple.com/app/freeze!-2-brothers/id904424939?mt=8 target="_blank">iOS</a> or <a href=https://play.google.com/store/apps/details?id=com.frozengun.freeze2.google target="_blank">Android</a>. I hope you enjoy the game!</p>
<hr />
]]></content:encoded>
			<wfw:commentRss>/blog/2015/09/24/tutorial-creating-awesome-water-with-liquidfun-snapshots-and-filters/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
	</channel>
</rss>
