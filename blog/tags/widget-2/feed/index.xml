<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>widget &#8211; Corona Labs</title>
	<atom:link href="/blog/tags/widget-2/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Mon, 19 Oct 2020 12:16:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>/wordpress/wp-content/uploads/2017/06/cropped-icon_32x32@2x-32x32.png</url>
	<title>widget &#8211; Corona Labs</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Corona Geek #191 &#8211; EAT Framework Updates &#038; Custom Widget Themes</title>
		<link>/blog/coronageek/corona-geek-191/</link>
		<comments>/blog/coronageek/corona-geek-191/#respond</comments>
		<pubDate>Mon, 08 Aug 2016 19:12:36 +0000</pubDate>
		<dc:creator><![CDATA[Charles McKeever]]></dc:creator>
				<category><![CDATA[Corona Geek]]></category>
		<category><![CDATA[Google+ Hangouts]]></category>
		<category><![CDATA[developer tools]]></category>
		<category><![CDATA[widget]]></category>

		<guid isPermaLink="false">/?post_type=coronageek&#038;p=67708</guid>
		<description><![CDATA[On this week's Corona Geek podcast, Ed Maurina demoed the latest version of EAT Framework and Mike Hempfling shared his widget theme packs with the panel.]]></description>
				<content:encoded><![CDATA[<p>On this week&#8217;s Corona Geek podcast, Ed Maurina demoed the latest version of <a href=https://gumroad.com/l/EATFrameOneTime?# target="_blank">EAT Framework</a>, which is Ed&#8217;s Awesome Tool for generating base project configurations based on point and click, drag and drop, option selection.</p>
<p><iframe width="800" height="450" src="https://www.youtube.com/embed/iO7GP-ytImM?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p><img class="alignright wp-image-477" src="/wordpress/wp-content/uploads/2012/08/corona-geek-head-transparent-150x150.png" alt="Corona Geek" width="105" height="105" srcset="/wordpress/wp-content/uploads/2012/08/corona-geek-head-transparent-150x150.png 150w, /wordpress/wp-content/uploads/2012/08/corona-geek-head-transparent.png 250w" sizes="(max-width: 105px) 100vw, 105px" /></p>
<p>Ed also plans to add game mechanic generation options along with drag and drop feature selection. EAT may also eventually include some version of a level editor. If you&#8217;d like to be an early adopter and help Ed shape the features of EAT, <a href=https://gumroad.com/l/EATFrameOneTime?# target="_blank">support his efforts via GumRoad</a>.</p>
<p>Also, if you would like to save hours of time creating custom widget themes, <a href=http://cravecreative.com/corona-widget-themes.php target="_blank">check out the widget theme work</a> that Mike Hempfling is doing at Crave Creative.</p>
<p><strong>Panelists:</strong></p>
<ul>
<li><a href=https://www.militantgame.com/ target="_blank">Steven Johnson</a></li>
<li><a href=https://www.linkedin.com/in/charlesmckeever/ target="_blank">Charles McKeever</a></li>
<li><a href=http://mobileoctopus.com/ target="_blank">Noah Malewicz</a></li>
<li><a href=http://cravecreative.com/ target="_blank">Mike Hempfling</a></li>
<li><a href=http://roaminggamer.com/ target="_blank">Ed Maurina</a></li>
<li><a href=https://www.linkedin.com/in/robmiracle target="_blank">Rob Miracle</a></li>
</ul>
<p><strong>Promote Your Apps:</strong></p>
<ul>
<li><a href=https://coronalabs.wufoo.com/forms/showcase-app-submission/ target="_blank">Add your app to the Corona Showcase</a></li>
</ul>
<p><strong>Thank you for watching, listening, and following Corona Geek:</strong></p>
<ul>
<li><a href=http://bit.ly/H0dEgO target="_blank">Subscribe to Corona Geek on YouTube</a></li>
<li><a href=http://bit.ly/19JGUiG target="_blank">Download Corona Geek on iTunes</a></li>
<li><a href=http://on.fb.me/1EWdkLX target="_blank">Follow Corona Geek on Facebook</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/blog/coronageek/corona-geek-191/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
<enclosure url="http://corona-geek.s3.amazonaws.com/corona-geek-show-191-2016-08-08-EAT-Frameworks-demo.mp3" length="75001906" type="audio/mpeg" />
		</item>
		<item>
		<title>Update: Android Widget Themes</title>
		<link>/blog/2014/08/08/update-android-widget-themes/</link>
		<comments>/blog/2014/08/08/update-android-widget-themes/#comments</comments>
		<pubDate>Fri, 08 Aug 2014 20:41:44 +0000</pubDate>
		<dc:creator><![CDATA[Brent Sorrentino]]></dc:creator>
				<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[android]]></category>
		<category><![CDATA[theme]]></category>
		<category><![CDATA[widget]]></category>
		<category><![CDATA[Widgets]]></category>

		<guid isPermaLink="false">/?p=59334</guid>
		<description><![CDATA[Starting in the most recent public build, all Corona developers can now opt to use two new widget themes in their projects. These new themes are styled after the Android "Holo Light" and "Holo Dark" themes which are commonly found on Android devices running recent versions of the OS.]]></description>
				<content:encoded><![CDATA[<p>Starting in the most recent <a href=https://developer.coronalabs.com/downloads/corona-sdk target="_blank">public build</a>, all Corona developers can now opt to use two new <a href=http://docs.coronalabs.com/api/library/widget/index.html target="_blank">widget</a> themes in their projects. These new themes are styled after the Android <strong>&#8220;Holo Light&#8221;</strong> and <strong>&#8220;Holo Dark&#8221;</strong> themes which are commonly found on Android devices running recent versions of the OS.</p>
<p>Both of the new themes contain assets up to the <code>@4x</code> scale profile, which means that your widgets should appear crisp and clean on even the highest resolution Android devices like the Nexus 10.</p>
<div style="width: 95%;">
<p><img class="alignnone size-full wp-image-59335" style="margin: 0px; padding-bottom: 20px; padding-top: 10px;" src="/wordpress/wp-content/uploads/2014/08/android-themes.png" alt="android-themes" /></p>
</div>
<h3>Setting the Themes</h3>
<p>The new themes can be set by passing the proper value to the <a href=http://docs.coronalabs.com/api/library/widget/setTheme.html target="_blank">widget.setTheme()</a> API:</p><pre class="crayon-plain-tag">-- Use new 'Holo Light' theme
widget.setTheme( &quot;widget_theme_android_holo_light&quot; )</pre><p></p><pre class="crayon-plain-tag">-- Use new 'Holo Dark' theme
widget.setTheme( &quot;widget_theme_android_holo_dark&quot; )</pre><p>And that&#8217;s it &#8212; all non-skinned widgets throughout the project will appear in the new chosen theme.</p>
<h3>Updated Sample Project</h3>
<p>To preview the new themes in action, please load the <strong>WidgetDemo</strong> sample project included with Corona SDK:</p>
<p><code>CoronaSDK</code> → <code>SampleCode</code> → <code>Interface</code> → <code>WidgetDemo</code></p>
<h3>Previous Android Theme</h3>
<p>Note that using the new Holo themes is entirely optional. The previous Android theme files are still available, so if you wish to continue using that theme, be sure to set the theme as follows:</p><pre class="crayon-plain-tag">-- Use older Android 2.x theme
widget.setTheme( &quot;widget_theme_android&quot; )</pre><p></p>
<h3>In Summary</h3>
<p>Hopefully you can easily integrate these new themes into your existing projects with a minimal amount of repositioning, although some adjustments will be necessary due to slightly differing sizes of the updated styles.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2014/08/08/update-android-widget-themes/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Widgets — Creating a sliding panel</title>
		<link>/blog/2014/04/08/widgets-creating-a-sliding-panel/</link>
		<comments>/blog/2014/04/08/widgets-creating-a-sliding-panel/#comments</comments>
		<pubDate>Wed, 09 Apr 2014 01:21:38 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Tutorials, Tips and Demos]]></category>
		<category><![CDATA[panel]]></category>
		<category><![CDATA[tutorial]]></category>
		<category><![CDATA[ui]]></category>
		<category><![CDATA[widget]]></category>

		<guid isPermaLink="false">/?p=57969</guid>
		<description><![CDATA[Today's tutorial demonstrates how to create a sliding panel that has many uses, ranging from games to business applications. Using just one core function, you can easily implement a wide variety of panels that appear from different sides of the screen and utilize unique easing transitions.]]></description>
				<content:encoded><![CDATA[<p>Today&#8217;s tutorial demonstrates how to create a <strong>sliding panel</strong> that has many uses, ranging from games to business applications. You might build an adventure game where the player&#8217;s inventory needs to slide on the screen, then hide itself when the user is done. Or you might build a menu that slides in when the player taps the infamous &#8220;hamburger&#8221; menu icon. Yet another possibility is sliding notices in and out.</p>
<p>As with the previous UI tutorials on <a href=http://www.coronalabs.com/blog/2013/12/31/tutorial-extending-widgets-with-a-navigation-bar/ target="_blank">navigation panels</a> and <a href=http://www.coronalabs.com/blog/2013/12/03/tutorial-customizing-text-input/ target="_blank">text fields</a>, this tutorial will extend the <a href=http://docs.coronalabs.com/api/library/widget/index.html target="_blank">widget</a> library, creating a <strong>new</strong> widget called <code>widget.newPanel()</code>. Let&#8217;s look at the entire function:</p><pre class="crayon-plain-tag">function widget.newPanel( options )
    local customOptions = options or {}
    local opt = {}

    opt.location = customOptions.location or &quot;top&quot;

    local default_width, default_height
    if ( opt.location == &quot;top&quot; or opt.location == &quot;bottom&quot; ) then
        default_width = display.contentWidth
        default_height = display.contentHeight * 0.33
    else
        default_width = display.contentWidth * 0.33
        default_height = display.contentHeight
    end

    opt.width = customOptions.width or default_width
    opt.height = customOptions.height or default_height

    opt.speed = customOptions.speed or 500
    opt.inEasing = customOptions.inEasing or easing.linear
    opt.outEasing = customOptions.outEasing or easing.linear

    if ( customOptions.onComplete and type(customOptions.onComplete) == &quot;function&quot; ) then
        opt.listener = customOptions.onComplete
    else 
        opt.listener = nil
    end

    local container = display.newContainer( opt.width, opt.height )

    if ( opt.location == &quot;left&quot; ) then
        container.anchorX = 1.0
        container.x = display.screenOriginX
        container.anchorY = 0.5
        container.y = display.contentCenterY
    elseif ( opt.location == &quot;right&quot; ) then
        container.anchorX = 0.0
        container.x = display.actualContentWidth
        container.anchorY = 0.5
        container.y = display.contentCenterY
    elseif ( opt.location == &quot;top&quot; ) then
        container.anchorX = 0.5
        container.x = display.contentCenterX
        container.anchorY = 1.0
        container.y = display.screenOriginY
    else
        container.anchorX = 0.5
        container.x = display.contentCenterX
        container.anchorY = 0.0
        container.y = display.actualContentHeight
    end

    function container:show()
        local options = {
            time = opt.speed,
            transition = opt.inEasing
        }
        if ( opt.listener ) then
            options.onComplete = opt.listener
            self.completeState = &quot;shown&quot;
        end
        if ( opt.location == &quot;top&quot; ) then
            options.y = display.screenOriginY + opt.height
        elseif ( opt.location == &quot;bottom&quot; ) then
            options.y = display.actualContentHeight - opt.height
        elseif ( opt.location == &quot;left&quot; ) then
            options.x = display.screenOriginX + opt.width
        else
            options.x = display.actualContentWidth - opt.width
        end 
        transition.to( self, options )
    end

    function container:hide()
        local options = {
            time = opt.speed,
            transition = opt.outEasing
        }
        if ( opt.listener ) then
            options.onComplete = opt.listener
            self.completeState = &quot;hidden&quot;
        end
        if ( opt.location == &quot;top&quot; ) then
            options.y = display.screenOriginY
        elseif ( opt.location == &quot;bottom&quot; ) then
            options.y = display.actualContentHeight
        elseif ( opt.location == &quot;left&quot; ) then
            options.x = display.screenOriginX
        else
            options.x = display.actualContentWidth
        end 
        transition.to( self, options )
    end

    return container
end</pre><p>For consistency, this new widget will follow the coding standard of the other widgets in the Corona <a href=https://github.com/coronalabs/framework-widget target="_blank">open source</a> widget library. Like other widgets, we begin by passing in a table of parameters necessary to create the panel (lines 5 through 27). These include:</p>
<ul>
<li><code>location</code> — where the panel originates from (left, right, top, or bottom).</li>
<li><code>width</code> — the width of the panel.</li>
<li><code>height</code> — the height of the panel.</li>
<li><code>speed</code> — how fast the panel shows and hides (slides in or out).</li>
<li><code>inEasing</code> — the transition <a href=http://docs.coronalabs.com/api/library/easing/index.html target="_blank">easing</a> method used when the panel shows.</li>
<li><code>outEasing</code> — the transition <a href=http://docs.coronalabs.com/api/library/easing/index.html target="_blank">easing</a> method used when the panel hides.</li>
<li><code>onComplete</code> — a function to execute when the panel completes showing and hiding.</li>
</ul>
<p>All parameters are optional and are set to reasonable defaults. The <code>location</code> parameter is a string value of either <code>"left"</code>, <code>"right"</code>, <code>"top"</code> or <code>"bottom"</code> that defaults to <code>"top"</code>. The <code>speed</code> parameter defaults to <strong>500</strong> milliseconds. <code>inEasing</code> and <code>outEasing</code> are <strong>linear</strong> by default but can be set to any of the standard <a href=http://docs.coronalabs.com/api/library/easing/index.html target="_blank">easing</a> methods.</p>
<p><code>onComplete</code> is optional and defaults to <code>nil</code>. In the above example, we actually create two completion listeners, one for each of the actions the panel supports (<code>panel:show()</code> and <code>panel:hide()</code>).</p>
<h4>Code notes</h4>
<p>Let&#8217;s step through the function code and inspect some important aspects:</p>
<ul>
<li>When adding the code to define the listener (lines 23-27), it&#8217;s helpful to make sure that a parameter was passed, but also that it&#8217;s a function and not some other variable type.</li>
<li>If a panel slides in from the left or right, it&#8217;s reasonable to take up the full height of the visible screen, but the width would need to be specific to the app. Panels coming in from the top or bottom may take up the full width of the device but be limited to 1/3 of the screen.</li>
<li>Line 29 creates a <a href=http://docs.coronalabs.com/api/library/display/newContainer.html target="_blank">display.newContainer()</a>. This is similar to <a href=http://docs.coronalabs.com/api/library/display/newGroup.html target="_blank">display.newGroup()</a>, except that its bounds are automatically clipped to the defined width and height. This container object is returned on line 95 to the calling function.</li>
<li>The panel is positioned off screen based on the location specified. Since there are many ways to set up the size and scale in <code>config.lua</code>, this function uses <code>display.screenOriginX</code> and <code>display.screenOriginY</code> to reference the left and top of the screen. Likewise, <code>display.actualContentWidth</code> and <code>display.actualContentHeight</code> represents the right and bottom edges of the screen. By setting the anchor point to the side of the container that faces the content area, we can use these values to position it. The other value will simply center the container along that edge.</li>
<li>To show and hide the panel, two methods are included named <code>show()</code> and <code>hide()</code>. Lines 53-93 implement these two functions. The panels will be shown or hidden using a simple <code>transition.to()</code> call, but first we need to determine where to move the panel to. If we&#8217;re sliding the panel in/out from the top or bottom, we need to transition the <strong>y</strong> value. If we&#8217;re sliding it in/out from either side, we need to use the <strong>x</strong> value. Again, we use the defined points for the sides of the screen and either add or subtract the width or height of the panel.</li>
</ul>
<h3>Using the &#8220;widget.newPanel()&#8221;</h3>
<p>To use the panel, simply create a new object, in this case <code>panel</code>, and above that, the optional listener function that&#8217;s specified as the <code>onComplete</code> parameter:</p><pre class="crayon-plain-tag">local function panelTransDone( target )
    native.showAlert( &quot;Panel&quot;, &quot;Complete&quot;, { &quot;Okay&quot; } )
    if ( target.completeState ) then
        print( &quot;PANEL STATE IS: &quot;..target.completeState )
    end
end

local panel = widget.newPanel{
    location = &quot;top&quot;,
    onComplete = panelTransDone,
    width = display.contentWidth * 0.8,
    height = display.contentHeight * 0.8,
    speed = 250,
    inEasing = easing.outBack,
    outEasing = easing.outCubic
}</pre><p>When done, <code>panel</code> will be the container object to which we can add whatever content desired using the <code>object:insert()</code> call. To keep things more organized, display objects can optionally be added directly to the panel object:</p><pre class="crayon-plain-tag">panel.background = display.newRect( 0, 0, panel.width, panel.height )
panel.background:setFillColor( 0, 0.25, 0.5 )
panel:insert( panel.background )

panel.title = display.newText( &quot;menu&quot;, 0, 0, native.systemFontBold, 18 )
panel.title:setFillColor( 1, 1, 1 )
panel:insert( panel.title )</pre><p></p>
<h4>Showing and hiding</h4>
<p>When desired, we can show or hide the panel by simply calling the proper method:</p><pre class="crayon-plain-tag">panel:show()
panel:hide()</pre><p></p>
<h4>Composer notes</h4>
<p>If you&#8217;re using <a href=http://docs.coronalabs.com/guide/system/composer/index.html target="_blank">Composer</a>, you may not want to insert the panel into the Composer group because the panel is generally intended to slide <strong>over</strong> anything else in the scene. However, if you choose to add it to the scene&#8217;s view, it should be the <strong>last</strong> thing inserted into the scene, or else you should call <a href=http://docs.coronalabs.com/api/type/DisplayObject/toFront.html target="_blank">object:toFront()</a> to move it to the top of the scene&#8217;s view.</p>
<p>On the general topic of Composer, you may ask &#8220;shouldn&#8217;t this be done with an overlay?&#8221;. While that is a valid approach, overlays are individual scenes and it takes more effort to construct and deconstruct a scene. In contrast, <code>widget.newPanel()</code> yields a simple slide-in/out unit which can be used with or without Composer.</p>
<h3>In summary</h3>
<p>This tutorial should get you started with implementing basic sliding panels in your app. With some clever adjustments to the various parameters, you can easily implement a wide variety of panels that appear from different sides of the screen and utilize unique easing transitions.</p>
<p>To use this widget in your own projects, please download the code from our GitHub <a href=https://github.com/coronalabs/sample-widget-panel target="_blank">repository</a>.</p>
<hr />
]]></content:encoded>
			<wfw:commentRss>/blog/2014/04/08/widgets-creating-a-sliding-panel/feed/</wfw:commentRss>
		<slash:comments>30</slash:comments>
		</item>
		<item>
		<title>Tutorial: Advanced TableView tactics</title>
		<link>/blog/2014/03/04/tutorial-advanced-tableview-tactics/</link>
		<comments>/blog/2014/03/04/tutorial-advanced-tableview-tactics/#comments</comments>
		<pubDate>Tue, 04 Mar 2014 23:29:21 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Tutorials, Tips and Demos]]></category>
		<category><![CDATA[TableView]]></category>
		<category><![CDATA[tutorial]]></category>
		<category><![CDATA[widget]]></category>

		<guid isPermaLink="false">/?p=56664</guid>
		<description><![CDATA[In the mobile app world, table views, or "list views," are based on a paradigm where information is presented to the user in a series of single-column rows. In this tutorial, we're going to look more deeply at this powerful tool in the widget repository and discuss how to implement some advanced features with just a little extra coding.]]></description>
				<content:encoded><![CDATA[<p>In this tutorial, we&#8217;re going to look more deeply at table views (or &#8220;list views&#8221;) which are based on a mobile device paradigm where information is presented to the user in a series of single-column rows. In iOS, apps like Mail, Clock, and Contacts are obvious table views, but they are also used in countless other apps for menus and more.</p>
<p>In Corona, <a href=http://docs.coronalabs.com/api/library/widget/newTableView.html target="_blank">widget.newTableView()</a> is a widget rendered in OpenGL and it has been built to emulate some of the more common features of a native table view. Under the hood, a Corona table view is built on top of a <a href=http://docs.coronalabs.com/api/library/widget/newScrollView.html target="_blank">widget.newScrollView()</a> which handles the up/down scrolling, the spring-like behavior, and the momentum-based scrolling.</p>
<h3>Setup</h3>
<p>In this tutorial example, we&#8217;ll create a table view that spans the full width of the screen, positioned just below an upper title bar and spanning down to a <a href=http://docs.coronalabs.com/api/library/widget/newTabBar.html target="_blank">widget.newTabView()</a> controller at the bottom. Here&#8217;s the basic code:</p><pre class="crayon-plain-tag">local navBarHeight = 60
local tabBarHeight = 50
local myList = widget.newTableView {
   top = navBarHeight, 
   width = display.contentWidth, 
   height = display.contentHeight - navBarHeight - tabBarHeight,
   onRowRender = onRowRender,
   onRowTouch = onRowTouch,
   listener = scrollListener
}</pre><p>This creates an &#8220;empty&#8221; table view of the described size. Now, we must populate it with <strong>rows</strong>. This is done using the <a href=http://docs.coronalabs.com/api/type/TableViewWidget/insertRow.html target="_blank">tableView:insertRow()</a> method which inserts a blank, empty row into the view. To populate the widget in this example, we&#8217;ll use a table of items that contain a name and phone number:</p><pre class="crayon-plain-tag">local myData = {}
myData[1] = { name=&quot;Fred&quot;,    phone=&quot;555-555-1234&quot; }
myData[2] = { name=&quot;Barney&quot;,  phone=&quot;555-555-1235&quot; }
myData[3] = { name=&quot;Wilma&quot;,   phone=&quot;555-555-1236&quot; }
myData[4] = { name=&quot;Betty&quot;,   phone=&quot;555-555-1237&quot; }
myData[5] = { name=&quot;Pebbles&quot;, phone=&quot;555-555-1238&quot; }
myData[6] = { name=&quot;BamBam&quot;,  phone=&quot;555-555-1239&quot; }
myData[7] = { name=&quot;Dino&quot;,    phone=&quot;555-555-1240&quot; }

for i = 1, #myData do
   myList:insertRow{
      rowHeight = 60,
      isCategory = false,
      rowColor = { 1, 1, 1 },
      lineColor = { 0.90, 0.90, 0.90 }
   }
end</pre><p>Even with this setup, nothing is visually rendered to the table view at this point. Behind the scenes, the table view widget keeps track of which rows are on screen and draws only those rows when they are needed. This is accomplished by a function that we provide and define as the <code>onRowRender</code> parameter in the table view constructor. When this function is called by the table view, we&#8217;re provided with the handle to the appropriate row.</p>
<p>In Corona, each <strong>row</strong> is actually a separate <a href=http://docs.coronalabs.com/api/library/display/newGroup.html target="_blank">display.newGroup()</a>. Thus, in the row rendering function, we can create the necessary custom display objects and use the standard <a href=http://docs.coronalabs.com/api/type/GroupObject/insert.html target="_blank">group:insert(object)</a> method to insert each into the table view row.</p>
<p>How does the row rendering function know what to render within each row? Let&#8217;s inspect a typical example of the row rendering function:</p><pre class="crayon-plain-tag">local function onRowRender( event )

   --Set up the localized variables to be passed via the event table

   local row = event.row
   local id = row.index

   row.bg = display.newRect( 0, 0, display.contentWidth, 60 )
   row.bg.anchorX = 0
   row.bg.anchorY = 0
   row.bg:setFillColor( 1, 1, 1 )
   row:insert( row.bg )

   row.nameText = display.newText( myData[id].name, 12, 0, native.systemFontBold, 18 )
   row.nameText.anchorX = 0
   row.nameText.anchorY = 0.5
   row.nameText:setFillColor( 0 )
   row.nameText.y = 20
   row.nameText.x = 42

   row.phoneText = display.newText( myData[id].phone, 12, 0, native.systemFont, 18 )
   row.phoneText.anchorX = 0
   row.phoneText.anchorY = 0.5
   row.phoneText:setFillColor( 0.5 )
   row.phoneText.y = 40
   row.phoneText.x = 42

   row.rightArrow = display.newImageRect( &quot;rightarrow.png&quot;, 15 , 40, 40 )
   row.rightArrow.x = display.contentWidth - 20
   row.rightArrow.y = row.height / 2

   row:insert( row.nameText )
   row:insert( row.phoneText )
   row:insert( row.rightArrow )
   return true
end</pre><p>The &#8220;magic&#8221; here is how we use the row&#8217;s ID number to map against the <code>myData</code> dataset. However, while this works great for simple cases, it won&#8217;t work for more advanced table views that contain &#8220;category&#8221; rows or empty rows for spacing purposes.</p>
<h3>Introducing passable parameters</h3>
<p>This feature has been available for some time but it hasn&#8217;t been discussed too much. Essentially, it provides a programmatic way to associate a row and specific data <em>without</em> relying on an ID number. Let&#8217;s use the same example but pass in parameters instead:</p><pre class="crayon-plain-tag">for i = 1, #myData do
   myList:insertRow{
      rowHeight = 60,
      isCategory = false,
      rowColor = { 1, 1, 1 },
      lineColor = { 0.90, 0.90, 0.90 },
      params = {
         name = myData[i].name,
         phone = myData[i].phone
      }
   }
end</pre><p>Now we can insert rows that contain data using the <code>params</code> table. Rows that have no data can be inserted without parameters (category rows, for example). Then, in the row rendering function, we can simply test to see if it&#8217;s a category row or not and render it accordingly:</p><pre class="crayon-plain-tag">local function onRowRender( event )

   --Set up the localized variables to be passed via the event table

   local row = event.row
   local id = row.index
   local params = event.row.params

   row.bg = display.newRect( 0, 0, display.contentWidth, 60 )
   row.bg.anchorX = 0
   row.bg.anchorY = 0
   row.bg:setFillColor( 1, 1, 1 )
   row:insert( row.bg )

   if ( event.row.params ) then    
      row.nameText = display.newText( params.name, 12, 0, native.systemFontBold, 18 )
      row.nameText.anchorX = 0
      row.nameText.anchorY = 0.5
      row.nameText:setFillColor( 0 )
      row.nameText.y = 20
      row.nameText.x = 42

      row.phoneText = display.newText( params.phone, 12, 0, native.systemFont, 18 )
      row.phoneText.anchorX = 0
      row.phoneText.anchorY = 0.5
      row.phoneText:setFillColor( 0.5 )
      row.phoneText.y = 40
      row.phoneText.x = 42

      row.rightArrow = display.newImageRect( &quot;rightarrow.png&quot;, 15 , 40, 40 )
      row.rightArrow.x = display.contentWidth - 20
      row.rightArrow.y = row.height / 2

      row:insert( row.nameText )
      row:insert( row.phoneText )
      row:insert( row.rightArrow )
   end
   return true
end</pre><p>Now the row rendering function doesn&#8217;t need to know anything about our data structure. This helps support the concept of <strong>Model-View-Controller (MVC)</strong>. With this method, we can focus on our <strong>View</strong> and know which data to get without knowledge of how the <strong>Model</strong> is tracking the data. In most cases, this is a very good way to populate table view rows and it should make it easier to visualize data with the associated row.</p>
<h3>Reloading the table view on a status bar tap</h3>
<p>This is a frequently-requested feature that&#8217;s easy to implement with a small amount of code. How the data is pulled in will depend largely on the app design, and it&#8217;s your responsibility to create a reload function that will be called as part of the tap handler. In most cases, the common functionality will be:</p>
<ol>
<li>Retrieve the updated data (new tweets or RSS feeds, for example).</li>
<li>Flush (clear) the existing table view&#8217;s data.</li>
<li>Re-insert the new data into the table view.</li>
</ol>
<p>To flush/empty the rows as mentioned in step #2, we can call this function:</p><pre class="crayon-plain-tag">myList:deleteAllRows()</pre><p>Now, to build in the &#8220;status bar tap&#8221; functionality, we can create a transparent rectangle where the status bar resides and add a <code>"tap"</code> event handler on it. This tap function will, not surprisingly, call the custom reload function. It&#8217;s that simple!</p><pre class="crayon-plain-tag">local reloadBar = display.newRect( display.contentCenterX, display.topStatusBarContentHeight*0.5, display.contentWidth, display.topStatusBarContentHeight )
reloadBar.isVisible = false
reloadBar.isHitTestable = true
reloadBar:addEventListener( &quot;tap&quot;, reloadTable )</pre><p>There&#8217;s one important aspect to note: since the rectangle object is invisible (<code>.isVisible = false</code>), we must set <code>.isHitTestable</code> to <strong>true</strong> so it reacts to tap/touch events.</p>
<h3>Implementing &#8220;spring reloading&#8221;</h3>
<p>Table view &#8220;spring reloading&#8221; is the technique of pulling down on the list to have it reload/refresh. This isn&#8217;t quite as easy to implement as the status bar tap method, but let&#8217;s walk through it.</p>
<p>There are some prerequisites to consider as part of the User Interface and User Experience (UI/UX) for spring reloading. When a user pulls down on a table view, it reveals the &#8220;background&#8221; of the app. In some cases, you may want to place something behind the table view, like a solid gray block. Also, most spring reload systems have an animated graphic that shows when the user has pulled down far enough, prompting them to release their touch. In iOS, this is usually a spinner, which you may consider imitating via the Corona <a href=http://docs.coronalabs.com/api/library/widget/newSpinner.html target="_blank">spinner</a> widget. Ultimately, though, it&#8217;s your decision about how to handle the UI/UX for your app.</p>
<p>Before implementing spring reloading, let&#8217;s further examine the table view event system. Here&#8217;s our example table view constructor again:</p><pre class="crayon-plain-tag">local myList = widget.newTableView {
   top = navBarHeight, 
   width = display.contentWidth, 
   height = display.contentHeight - navBarHeight - tabBarHeight,
   onRowRender = onRowRender,
   onRowTouch = onRowTouch,
   listener = scrollListener
}</pre><p>As we&#8217;ve seen so far, the <code>onRowRender</code> function handles rendering and display of the actual table rows. Below that, the <code>onRowTouch</code> function handles <code>"tap"</code> and <code>"touch"</code> events on the individual rows (see the documentation for <a href=http://docs.coronalabs.com/api/library/widget/newTableView.html target="_blank">widget.newTableView()</a> for usage examples). The final function, assigned to the <code>listener</code> property, is the function that will listen for <em>scroll-related</em> events on the table — and those events are of particular interest in spring reloading. Using this listener, we&#8217;ll be able to detect when the table view starts to move, when it&#8217;s still moving under momentum, and when it stops moving. We&#8217;ll also get an <code>event.phase = nil</code> when the table view reaches the limits of its scrolling, and it&#8217;s this event phase which indicates that we should reload the table view. Let&#8217;s look at the example code:</p><pre class="crayon-plain-tag">local springStart = 0
local needToReload = false

local function scrollListener( event )
   if ( event.phase == &quot;began&quot; ) then
      springStart = event.target.parent.parent:getContentPosition()
      needToReload = false
   elseif ( event.phase == &quot;moved&quot; ) then
      if ( event.target.parent.parent:getContentPosition() &gt; springStart + 60 ) then
         needToReload = true
      end
   elseif ( event.limitReached == true and event.phase == nil and event.direction == &quot;down&quot; and needToReload == true ) then
      --print( &quot;Reloading Table!&quot; )
      needToReload = false
      reloadTable()
   end
   return true
end</pre><p>Notice how these conditional checks are used for different processes within the spring reloading:</p>
<ul>
<li>In the <code>"began"</code> phase, we store the current content position of the table view. This way, when the user pulls down on the list, accidental reloads are not triggered if the user pulls down just slightly. We also set the flag variable <code>needToReload</code> to <code>false</code> in this phase.  If you wish to have an animation start to indicate they are beginning a spring reload, this would be a good time to start it.</li>
<li>In the <code>"moved"</code> phase, if the table view position changes by a set amount more than it started at, in this example 60 pixels, we set the <code>needToReload</code> flag to <code>true</code>. Since the user could still be dragging the table view at this time, we do <strong>not</strong> trigger the reload yet.  If you have a graphic or animation showing the user it&#8217;s now time to let go or they have pulled down enough, you would change the graphic/animation here as well.</li>
<li>In the <code>"ended"</code> phase, you can stop any animations you started in the <code>"began"</code> or <code>"moved"</code> phases.</li>
<li>In the final conditional check, we don&#8217;t want to reload only when the movement ends. If we did, the table view would reload every time the scrolling stopped on the table view. Instead, we&#8217;ll check for a series of conditions, starting with the <code>event.limitReached</code> event equal to <code>true</code>. This event has no phase (<code>nil</code>), so we also check for the absence of <code>event.phase</code>. Next, we check that the movement direction is <code>"down"</code> (typically, reloads don&#8217;t occur after scrolling up) and we also confirm that the <code>needToReload</code> flag is <code>true</code> (i.e. the user has pulled the view down enough distance). If all of these conditions are met, we call the <code>reloadTable()</code> function to start the table view reload.</li>
</ul>
<h3>In conclusion</h3>
<p>Hopefully this tutorial has shown you how to add some creative and useful features to the table view widget. With the ability to use parameters to pass data to the row rendering function, plus these easy-to-implement reloading features, you can now supercharge your table views.</p>
<hr />
]]></content:encoded>
			<wfw:commentRss>/blog/2014/03/04/tutorial-advanced-tableview-tactics/feed/</wfw:commentRss>
		<slash:comments>41</slash:comments>
		</item>
		<item>
		<title>Tutorial: Creating a navigation bar</title>
		<link>/blog/2013/12/31/tutorial-extending-widgets-with-a-navigation-bar/</link>
		<comments>/blog/2013/12/31/tutorial-extending-widgets-with-a-navigation-bar/#comments</comments>
		<pubDate>Tue, 31 Dec 2013 17:12:15 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Tutorials, Tips and Demos]]></category>
		<category><![CDATA[tutorial]]></category>
		<category><![CDATA[widget]]></category>

		<guid isPermaLink="false">http://www.coronalabs.com/?p=54762</guid>
		<description><![CDATA[Today's tutorial illustrates how to create a standard iOS-style "UI Navigation Bar" widget in which we provide the definitions for two buttons, the functions to handle button interaction, and some basic information to draw the bar. Read further to learn more.]]></description>
				<content:encoded><![CDATA[<p>Using Corona, it&#8217;s easy enough to create our own top navigation bar — just draw the background, add some title text, and place the buttons as necessary. But if we want to adhere to the &#8220;DRY&#8221; programming theory (<strong>D</strong>on&#8217;t <strong>R</strong>epeat <strong>Y</strong>ourself), including an entire set of navigation bar code in every scene of an app is more work than it should be.</p>
<h3>About the navigation bar</h3>
<p>In the iOS vernacular, the top navigation bar is known as the <strong>UI Navigation Bar</strong> and it has fairly consistent behavior:</p>
<ul>
<li>a background</li>
<li>an optional left button</li>
<li>an optional right button</li>
<li>an optional title</li>
</ul>
<p>This tutorial illustrates how to create a standard iOS-style &#8220;UI Navigation Bar&#8221; widget in which we provide the definitions for two buttons, the functions to handle button interaction, and some basic information to draw the bar.</p>
<h3>Setup</h3>
<p>Like we did in the <a href=http://www.coronalabs.com/blog/2013/12/03/tutorial-customizing-text-input/ target="_blank">Customizing text input</a> tutorial, let&#8217;s begin by expanding the core <a href=http://docs.coronalabs.com/api/library/widget/index.html target="_blank">widget</a> library and defining the default parameters:</p><pre class="crayon-plain-tag">local widget = require( &quot;widget&quot; )

function widget.newNavigationBar( options )
   local customOptions = options or {}
   local opt = {}
   opt.left = customOptions.left or nil
   opt.top = customOptions.top or nil
   opt.width = customOptions.width or display.contentWidth
   opt.height = customOptions.height or 50
   if ( customOptions.includeStatusBar == nil ) then
      opt.includeStatusBar = true  -- assume status bars for business apps
   else
      opt.includeStatusBar = customOptions.includeStatusBar
   end

   -- Determine the amount of space to adjust for the presense of a status bar
   local statusBarPad = 0
   if ( opt.includeStatusBar ) then
      statusBarPad = display.topStatusBarContentHeight
   end

   opt.x = customOptions.x or display.contentCenterX
   opt.y = customOptions.y or (opt.height + statusBarPad) * 0.5
   opt.id = customOptions.id
   opt.isTransluscent = customOptions.isTransluscent or true
   opt.background = customOptions.background
   opt.backgroundColor = customOptions.backgroundColor
   opt.title = customOptions.title or &quot;&quot;
   opt.titleColor = customOptions.titleColor or { 0, 0, 0 }
   opt.font = customOptions.font or native.systemFontBold
   opt.fontSize = customOptions.fontSize or 18
   opt.leftButton = customOptions.leftButton or nil
   opt.rightButton = customOptions.rightButton or nil

   -- If &quot;left&quot; and &quot;top&quot; parameters are passed, calculate the X and Y
   if ( opt.left ) then
      opt.x = opt.left + opt.width * 0.5
   end
   if ( opt.top ) then
      opt.y = opt.top + (opt.height + statusBarPad) * 0.5
   end</pre><p>When creating a top nav bar, there are a few things to consider, and we&#8217;ve done so in this code. For example, does the app have a device-specific status bar? If so, the nav bar should be positioned below it, but the area the status bar occupies is still space that we&#8217;re responsible for. Because we cannot programmatically detect if the status bar is showing or not, we must pass in a flag that states if we decided to show or hide the status bar. The function will then calculate the status bar height and adjust placement of the nav bar accordingly.</p>
<p>Next, let&#8217;s construct the bar itself:</p><pre class="crayon-plain-tag">local barContainer = display.newGroup()
   local background = display.newRect( barContainer, opt.x, opt.y, opt.width, opt.height + statusBarPad )
   if ( opt.background ) then
      background.fill = { type=&quot;image&quot;, filename=opt.background }
   elseif ( opt.backgroundColor ) then
      background.fill = opt.backgroundColor
   else
      background.fill = { 1, 1, 1 } 
   end</pre><p>In this code block, we start by creating a <a href=http://docs.coronalabs.com/api/library/display/newContainer.html target="_blank">container</a> group to hold all of the visual objects. Then, a rectangle is created for the &#8220;background&#8221; and it&#8217;s added to the container group. Next, the passed-in parameters determine how to fill the rectangle — either with a specified image, a solid color, or (if nothing is provided) a solid white fill.</p>
<p>Now, let&#8217;s add the &#8220;title&#8221; of the page to the nav bar, if provided (note that some iOS apps don&#8217;t use titles):</p><pre class="crayon-plain-tag">if ( opt.title ) then 
      local title = display.newText( opt.title, background.x, background.y + statusBarPad * 0.5, opt.font, opt.fontSize )
      title:setFillColor( unpack(opt.titleColor) )
      barContainer:insert( title )
   end</pre><p>Now, let&#8217;s set up the buttons. There will be two buttons in this example: a &#8220;left&#8221; button and a &#8220;right&#8221; button. To keep things simple, we&#8217;ll use the existing <a href=http://docs.coronalabs.com/api/library/widget/newButton.html target="_blank">widget.newButton()</a> widget — essentially, we&#8217;ll pass the parameters to the button constructor:</p><pre class="crayon-plain-tag">local leftButton
   if ( opt.leftButton ) then
      if ( opt.leftButton.defaultFile ) then  -- construct an image button
         leftButton = widget.newButton({
            id = opt.leftButton.id,
            width = opt.leftButton.width,
            height = opt.leftButton.height,
            baseDir = opt.leftButton.baseDir,
            defaultFile = opt.leftButton.defaultFile,
            overFile = opt.leftButton.overFile
            onEvent = opt.leftButton.onEvent
            })
      else  -- else, construct a text button
         leftButton = widget.newButton({
            id = opt.leftButton.id,
            label = opt.leftButton.label,
            onEvent = opt.leftButton.onEvent,
            font = opt.leftButton.font or opt.font,
            fontSize = opt.fontSize,
            labelColor = opt.leftButton.labelColor or { default={ 1, 1, 1 }, over={ 0, 0, 0, 0.5 } },
            labelAlign = &quot;left&quot;,
            })
      end
      leftButton.x = 15 + leftButton.width * 0.5
      leftButton.y = title.y
      barContainer:insert( leftButton )  -- insert button into container group
   end

   local rightButton
   if ( opt.rightButton ) then
      if ( opt.rightButton.defaultFile ) then  -- construct an image button
         rightButton = widget.newButton({
            id = opt.rightButton.id,
            width = opt.rightButton.width,
            height = opt.rightButton.height,
            baseDir = opt.rightButton.baseDir,
            defaultFile = opt.rightButton.defaultFile,
            overFile = opt.rightButton.overFile,
            onEvent = opt.rightButton.onEvent
            })
      else  -- else, construct a text button
         rightButton = widget.newButton({
            id = opt.rightButton.id,
            label = opt.rightButton.label or &quot;Default&quot;,
            onEvent = opt.rightButton.onEvent,
            font = opt.leftButton.font or opt.font,
            fontSize = opt.fontSize,
            labelColor = opt.rightButton.labelColor or { default={ 1, 1, 1 }, over={ 0, 0, 0, 0.5 } },
            labelAlign = &quot;right&quot;,
            })
      end
      rightButton.x = display.contentWidth - ( 15 + rightButton.width * 0.5 )
      rightButton.y = title.y
      barContainer:insert( rightButton )  -- insert button into container group
    end

    return barContainer
end</pre><p>If images are provided via the <code>defaultFile</code> attribute, the code looks for the parameters associated with image-based widget buttons (see the <a href=http://docs.coronalabs.com/api/library/widget/newButton.html target="_blank">documentation</a>). If simple text buttons are preferred, we can specify a <code>label</code>, <code>font</code>, <code>fontSize</code>, and <code>labelColor</code> array. Once both buttons are set up, we just <code>return</code> the container to the caller as a reference to the object.</p>
<h3>Using the navigation bar widget</h3>
<p>To use this new widget, we simply include the above code in <code>main.lua</code>. It will be added to the widget library, so in other modules where you <code>require("widget")</code>, it will be available to you. Then, when we need to display a new navigation bar, we follow three basic steps:</p>
<h4>1. Write the button listeners</h4>
<p>The buttons on the nav bar will not be very useful unless there are callback listeners associated with tap action upon them. As such, let&#8217;s include some basic listener functions in the module where we want to use the nav bar:</p><pre class="crayon-plain-tag">local function handleLeftButton( event )
   if ( event.phase == &quot;ended&quot; ) then
      -- do stuff
   end
   return true
end

local function handleRightButton( event )
   if ( event.phase == &quot;ended&quot; ) then
      -- do stuff
   end
   return true
end</pre><p></p>
<h4>2. Declare the navigation bar buttons</h4>
<p>Now, let&#8217;s configure the buttons specific to this nav bar. In this example, the left button will be a two-image button and the right button will be a simple text button. Notice that we are also including a reference to the callback listeners we just wrote so that our buttons respond to touch.</p><pre class="crayon-plain-tag">local leftButton = {
   onEvent = handleLeftButton,
   width = 60,
   height = 34,
   defaultFile = &quot;images/backbutton.png&quot;,
   overFile = &quot;images/backbutton_over.png&quot;
}

local rightButton = {
   onEvent = handleRightButton,
   label = &quot;Add&quot;,
   labelColor = { default =  {1, 1, 1}, over = { 0.5, 0.5, 0.5} },
   font = &quot;HelveticaNeue-Light&quot;,
   isBackButton = false
}</pre><p></p>
<h4>3. Declare the navigation bar</h4>
<p>Finally, we declare the actual navigation bar as follows:</p><pre class="crayon-plain-tag">local navBar = widget.newNavigationBar({
   title = &quot;SuperDuper App&quot;,
   backgroundColor = { 0.96, 0.62, 0.34 },
   --background = &quot;images/topBarBgTest.png&quot;,
   titleColor = {1, 1, 1},
   font = &quot;HelveticaNeue&quot;,
   leftButton = leftButton,
   rightButton = rightButton,
   includeStatusBar = true
})</pre><p></p>
<h3>Where from here?</h3>
<p>There&#8217;s plenty of room for you to expand on this concept. First, this is very iOS-friendly, but it doesn&#8217;t build Android-style navigation bars. The Android-style top bar is more like the iOS <a href=https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/Bars.html?#//apple_ref/doc/uid/TP40006556-CH12-SW4 target="_blank">Toolbar</a>, with a series of buttons on the right side and a &#8220;hamburger&#8221; icon and graphic title on the left. Secondly, this example could be expanded to support more button styles than 2-image or basic text buttons. Finally, this example doesn&#8217;t support the navigation chevrons (less-than and greater-than symbols), but it could be configured easily enough.</p>
<hr />
]]></content:encoded>
			<wfw:commentRss>/blog/2013/12/31/tutorial-extending-widgets-with-a-navigation-bar/feed/</wfw:commentRss>
		<slash:comments>20</slash:comments>
		</item>
		<item>
		<title>Corona Weekly Update: Fixing bugs</title>
		<link>/blog/2013/06/24/corona-weekly-update-fixing-bugs/</link>
		<comments>/blog/2013/06/24/corona-weekly-update-fixing-bugs/#comments</comments>
		<pubDate>Tue, 25 Jun 2013 06:33:25 +0000</pubDate>
		<dc:creator><![CDATA[walter]]></dc:creator>
				<category><![CDATA[Corona SDK]]></category>
		<category><![CDATA[Daily Build]]></category>
		<category><![CDATA[polish]]></category>
		<category><![CDATA[widget]]></category>
		<category><![CDATA[windows]]></category>

		<guid isPermaLink="false">http://www.coronalabs.com/?p=36763</guid>
		<description><![CDATA[While we work on lots of features that make <a href="/products/corona-sdk/">mobile app development</a> easier, I want to highlight all the bug fixing that's been going on in parallel.

We've been very vigilant about regressions introduced in daily builds, but if there was one eye sore in our bugbase it was the bugs in the widget framework. We have attacked them with renewed vigor. 
]]></description>
				<content:encoded><![CDATA[<p>While we work on lots of features that make <a href=/products/corona-sdk/>mobile app development</a> easier, I want to highlight all the bug fixing that&#8217;s been going on in parallel.</p>
<p>We&#8217;ve been very vigilant about regressions introduced in daily builds, but if there was one eye sore in our bugbase it was the bugs in the widget framework. We have attacked them with renewed vigor.</p>
<p>Here&#8217;s a list of the widget enhancements we&#8217;ve made:</p>
<ul>
<li>Fixes the tableView scrollbar skinning with imageSheets. Fixes casenum 23646.</li>
<li>Corrects the switch instantiation via image sheet. Fixes casenum 23648.</li>
<li>Adds a custom params table to the insertRow ethod of the tableview, allowing for easy attachment of custom data to table rows. Fixes casenum 23811.</li>
<li>Fixes the touch permission variable or tableviews if the view has hit bottom or top limit. Fixes casenum 23406.</li>
<li>Added instance methods setScrollWidth() / setScrollHeight(). Fixes casenum 22869, casenum 21859.</li>
<li>Exposes the stepper inc/dec speed and iteration number properties. Fixes casenum 21958.</li>
<li>Creates the API method resizeView( newWidth ) for the progressView widget, allowing resize after creation. Fixes casenum 21874.</li>
<li>Enables choosing elements in the picker widget by tapping on them. Fixes casenum 21788</li>
<li>Fixes the tabBar selected image to scale to custom height if defined. Fixes casenum 21961.</li>
<li>Return the correct value in the Picker when the user taps on a value. Casenum 24148</li>
<li>Removed delay in resetting the tapped cell&#8217;s background color. Casenum 24263</li>
<li>Picker view autocap text when defining large labels, and solving up the scroll issues at high speed to one of the list ends. Casenum 23290</li>
<li>fixes involuntary scrolling after tapping and holding. Casenum 24244, 22607</li>
<li>Added tap event to the tabbar, fixes tap event propagation on the widgets behind tab bars. Casenum 24126</li>
<li>Fixes TabBar errors when custom images not supplied. Casenum 23996</li>
<li>The scrollview gets the .isBounceEnabled property that allows the view to bounce back or not, like the native behaviour. Casenum: 21357</li>
<li>Fixes changing scroll direction when the swipe occurs near one of the view limits. Casenum 22607, 24316</li>
</ul>
<p>We have a few more fixes coming, but widgets are a lot more polished now!</p>
<p>Starting in tomorrow&#8217;s daily build (1150 or later), we&#8217;ll also be fixing a regression introduced late last week where certain plugins were not getting downloaded. This only affects plugins used in the Corona Simulator. Your device builds are unaffected.</p>
<p>On top of that, we have also finished a ton of other polish items such as removing auto-suggestion on Android password fields, improved handling of disposed/invalid audio streams, and ensuring multi-byte POSTs pass the correct content length.</p>
<p>There were also several pesky Windows-only bugs:</p>
<ul>
<li>Remember position of console window between restarts; reduce flashing of windows on startup &#8211; no casenum</li>
<li>Fixed an issue where you can&#8217;t zoom out after zooming all the way in.</li>
<li>Fixed bug where display.newText() would remove trailing spaces on Windows</li>
<li>Fix issue with two instances of Simulator starting when a lua file was specified on the command line &#8211; fixes casenum 23206</li>
</ul>
<p>If you are using 3rd party tools that integrate with the Corona Simulator, that last one is something you&#8217;re really going to like!</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2013/06/24/corona-weekly-update-fixing-bugs/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Corona SDK Daily Build Update</title>
		<link>/blog/2013/03/04/corona-sdk-daily-build-update/</link>
		<comments>/blog/2013/03/04/corona-sdk-daily-build-update/#comments</comments>
		<pubDate>Tue, 05 Mar 2013 02:34:50 +0000</pubDate>
		<dc:creator><![CDATA[walter]]></dc:creator>
				<category><![CDATA[Corona SDK]]></category>
		<category><![CDATA[Daily Build]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[android]]></category>
		<category><![CDATA[daily build]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[widget]]></category>

		<guid isPermaLink="false">http://www.coronalabs.com/?p=29788</guid>
		<description><![CDATA[The current Corona Daily Build is now 1041. And we've been doing a lot to make Corona the best <a href="/products/corona-sdk/">cross-platform engine</a> out there. Lots of items on  iOS and Android that we've knocked out.]]></description>
				<content:encoded><![CDATA[<p>The current Corona <a href=https://developer.coronalabs.com/downloads/daily-builds>Daily Build</a> is now 1041. And we&#8217;ve been doing a lot to make Corona the best <a href=/products/corona-sdk/>cross-platform engine</a> out there.</p>
<p>Lots of small items that we&#8217;ve knocked out include:</p>
<ul>
<li>Android: Fixed silent crash that can only be seen in the log when exiting out of the app having native objects, (introduced in Daily Build #1030)</li>
<li>Android: Fixed silent crash that can only be seen in the log when quickly backing out of the app just before an alert dialog or activity indicator gets displayed</li>
<li>Android: When cancelAlert is called on an alert the event.action was clicked instead of cancelled, casenum: 10224</li>
<li>Android: Fixed store.finishTransaction() with Google Play; no longer causes past purchases to be received</li>
<li>Android: Fixed bug where a landscape-only app would sometimes display a black screen when returning from screen lock, (happens rarely and only on particular devices)</li>
<li>Android: Fixed a crash that can sometimes occur when accessing a TextField or TextBox&#8217;s &#8220;text&#8221; property while the end-user is editing the field</li>
<li>Disable &#8220;demo&#8221; fix due to win sim bug</li>
<li>iOS: Inneractive: Added minor change to support the keywords &#8216;fullscreen&#8217; or &#8216;interstitial&#8217; to display interstitials</li>
</ul>
<p>A ton of polish items dominated our bug fix list for Widget 2.0, but we also fixed some annoying iOS and Android bugs:</p>
<ul>
<li>10224: Android: Alert Box not returning &#8220;cancelled&#8221; action</li>
<li>21159: Android: media.show(media.PhotoLibrary) would fail to load images from Picasa, Google+, SkyDrive, and other remote sources</li>
<li>21098: iOS: native.newWebView loading/refresh coverup panel does not align with element</li>
<li>20755: iOS: Webview gray loading page is offset</li>
<li>20733: Kindle: On the amazon kindle the attachments had the wrong content type which caused the attachments to show incorrectly. </li>
<li>21068: Widget 2.0: TableView insertRow id</li>
<li>21073: Widget 2.0: All labels on buttons are embossed regardless of the &#8217;emboss&#8217;  setting.</li>
<li>21099: Widget 2.0 tableView category touch bug</li>
<li>21140: Widget 2.0: &#8220;ended&#8221; event fired when finger released off button</li>
<li>21160: Widget 2.0: bug with .deleteAllRows()</li>
<li>21162: Widget 2.0: ScrollView: Pulling past limits repeatedly, causes the scrollView to scroll in the opposite direction</li>
<li>21188: Widget 2.0: Tinting graphics buttons not possible</li>
<li>21243: Widget 2.0: Set tableview selection color</li>
<li>21249: Widget 2.0: ScrollView: Scroll Width/Height not recalculated with added content</li>
<li>21251: Widget 2.0: newtableview &#8211; tableViews with few rows have incorrect bottom limit</li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/blog/2013/03/04/corona-sdk-daily-build-update/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
