<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>text &#8211; Corona Labs</title>
	<atom:link href="/blog/tags/text/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Mon, 19 Oct 2020 12:16:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>/wordpress/wp-content/uploads/2017/06/cropped-icon_32x32@2x-32x32.png</url>
	<title>text &#8211; Corona Labs</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>From the Forum — Issue #116</title>
		<link>/blog/2016/03/25/from-the-forum-issue-116/</link>
		<pubDate>Fri, 25 Mar 2016 21:53:21 +0000</pubDate>
		<dc:creator><![CDATA[alex]]></dc:creator>
				<category><![CDATA[From the Forum]]></category>
		<category><![CDATA[drop shadow]]></category>
		<category><![CDATA[events]]></category>
		<category><![CDATA[onComplete]]></category>
		<category><![CDATA[swiping]]></category>
		<category><![CDATA[text]]></category>
		<category><![CDATA[touch]]></category>

		<guid isPermaLink="false">/?p=66254</guid>
		<description><![CDATA[Welcome to the latest installment of From the Forum. In this series, guest blogger Alex Jackson highlights outstanding threads from the Corona Forum. The goal is to bring attention to the most captivating, interesting, and thought-provoking discussions taking place in our very own backyard.]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-full wp-image-54943" style="margin: 0px 0px 10px 10px;" src="/wordpress/wp-content/uploads/2014/01/Icon_Resources_Forum.png" alt="From the Forum" /><em>Welcome to the latest installment of <strong>From the Forum</strong>. In <em>this series</em>, guest blogger Alex Jackson highlights outstanding threads from the <a href=http://forum.coronalabs.com>Corona/ Forum</a>. The goal is to bring attention to the most captivating, interesting, and thought-provoking discussions taking place in our very own backyard.</em></p>
<p><em>Please <a href=http://forum.coronalabs.com>visit/ the forum</a> to join these conversations or start your own!</em></p>
<hr />
<h3>Custom drop shadow on your text objects</h3>
<p>Getting custom text objects to appear accurately 100% of the time can feel like a bit of a magic act. Sometimes it feels like it would be easier to pull a rabbit out of a hat than ensure that all of our text effects, scaling and kerning has been implemented correctly across the board.</p>
<p>One of the issues I always run into is the ability to add a nice shadow or outline effect to my text objects. There is of course <a href=https://docs.coronalabs.com/api/library/display/newEmbossedText.html target="_blank">display.newEmbossedText()</a> which works well in simple cases, but it is simply not robust enough to handle all of the logical gymnastics we might throw at it. Unfortunately, another developer had the same issues, and looked to the community for some assistance. Fortunately, a bunch of developers came out to throw their solutions into the ring.</p>
<p>There are some pretty useful solutions and code snippets for this problem contained in the below thread. Click through and check’em out!</p>
<p><a href=https://forums.coronalabs.com/topic/62161-text-drop-shadow target="_blank">https://forums.coronalabs.com/topic/62161-text-drop-shadow</a></p>
<h3>A thorough check inside of onComplete</h3>
<p>The onComplete() callback function that Corona provides is, as we all know, invaluable when paired with Corona’s event-driven model. With an asynchronous system, returning control to your app is a matter of course, and as Rob Miracle’s excellent tutorial points out:</p>
<p>“When these events complete, they notify your program that they’re finished and allow you an opportunity to respond”</p>
<p>The handling of these returned values takes place in a callback function. But what if you want to use something a bit more complex with only one callback function. Exactly the same issue was posted in the forums earlier, and the question received some fantastic responses. The suggestions were fantastic, and you would do well to read through the entire thread!</p>
<p><a href=https://forums.coronalabs.com/topic/62229-using-one-oncomplete-with-multiple-functions/ target="_blank">https://forums.coronalabs.com/topic/62229-using-one-oncomplete-with-multiple-functions/</a></p>
<h3>Swiping the day away</h3>
<p>I’ve got quite an interesting thread on tap here that displays some deft mathematics for identifying some crucial user interaction. By detecting the movement of a single finger on the screen and comparing the present touch with the delta X/Y location. This has the added wrinkle of using separate functions for location detection, which, in my opinion, is an underused and oft-overlooked technique. Head on through to the original thread to learn more about how you can implement this functionality in your app now!</p>
<p><a href=https://forums.coronalabs.com/topic/62284-best-way-to-detect-swipe-in-4-directions/ target="_blank">https://forums.coronalabs.com/topic/62284-best-way-to-detect-swipe-in-4-directions/</a></p>
<h4>About Alex</h4>
<p>Alex Jackson is an indie developer and the founder of <a href=http://www.panc.co/ target="_blank">Panc Interactive</a>, specializing in retro-style gaming. He has created several mobile applications, enjoys long walks on the beach, pixel art, and reading the Corona forums. Contact him by <a href=mailto:alex@panc.co>email</a> or follow him on Twitter: <a href=http://twitter.com/pancinteractive>@pancinteractive</a>. Check out his new game <a href=http://www.panc.co/segreta-download-page.html target="_blank">Segreta</a> on iOS, Android, Windows Phone and Amazon devices.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Introducing the UTF-8 string plugin</title>
		<link>/blog/2016/03/21/introducing-the-utf-8-string-plugin/</link>
		<comments>/blog/2016/03/21/introducing-the-utf-8-string-plugin/#comments</comments>
		<pubDate>Mon, 21 Mar 2016 20:24:16 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Corona SDK]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Plugins]]></category>
		<category><![CDATA[lua]]></category>
		<category><![CDATA[multi-byte]]></category>
		<category><![CDATA[string]]></category>
		<category><![CDATA[strings]]></category>
		<category><![CDATA[text]]></category>
		<category><![CDATA[unicode]]></category>
		<category><![CDATA[UTF-8]]></category>

		<guid isPermaLink="false">/?p=66168</guid>
		<description><![CDATA[Corona Labs is pleased to announce the UTF-8 plugin, useful for managing strings with non-ASCII characters. Read further to learn how this plugin may help in your app development.]]></description>
				<content:encoded><![CDATA[<p>One potential challenge for app developers is &#8220;localizing&#8221; their apps internationally. Perhaps it&#8217;s a simple matter of working with someone&#8217;s name which has non-ASCII characters in it, or more comprehensive support for languages like Japanese which uses a unique character set.</p>
<p>The core issue for Corona developers is that Lua&#8217;s <a href=https://docs.coronalabs.com/api/library/string/index.html target="_blank">string</a> functions consider a string as merely a series of bytes, and it&#8217;s unaware of multi-byte characters. This causes problems if you want to know how many characters are in a string containing multi-byte characters because, in this case, Lua will simply count the bytes. Even more issues can arise if you need to gather sub-strings or convert a non-ASCII string to uppercase or lowercase. All in all, this can be considerably frustrating to developers who build apps for worldwide distribution.</p>
<h3>The solution?</h3>
<p>Recently, Corona Labs released the <a href=https://store.coronalabs.com/plugin/utf-8 target="_blank">UTF-8 plugin</a> to help alleviate these issues. The plugin&#8217;s functions closely mirror the existing <a href=https://docs.coronalabs.com/api/library/string/index.html target="_blank">string</a> library functions, except that the UTF-8 equivalents handle multi-byte strings. For instance, just as you might use <a href=https://docs.coronalabs.com/api/library/string/match.html target="_blank">string.match()</a>, on a normal ASCII string, you can substitute <code>utf8.match()</code> for non-ASCII strings.</p>
<p>This plugin also introduces several new functions for advanced purposes, helping you deal with character positions, offsets, code points, sub-string insertion/removal, and more. You can see a complete list and usage details in our <a href=https://docs.coronalabs.com/plugin/utf8/index.html target="_blank">documentation</a>.</p>
<h3>Usage</h3>
<p>Like all Corona plugins, you need to include it in your <code>build.settings</code> file:</p><pre class="crayon-plain-tag">settings =
{
    plugins =
    {
        [&quot;plugin.utf8&quot;] =
        {
            publisherId = &quot;com.coronalabs&quot;
        },
    },
}</pre><p>Then, in any module where you want to use UTF-8 functions, simply <code>require()</code> the plugin as usual:</p><pre class="crayon-plain-tag">local utf8 = require( &quot;plugin.utf8&quot; )</pre><p>After that, simply call <code>string.[methodName]</code> functions as <code>utf8.[methodName]</code> instead. For example, notice the output values of the respective &#8220;length&#8221; functions (<code>string.len()</code> and <code>utf8.len()</code>) on an identical string:</p><pre class="crayon-plain-tag">-- The Russian alphabet
print( string.len( &quot;АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ&quot; ) )  --prints 64
print( utf8.len( &quot;АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ&quot; ) )    --prints 32</pre><p></p>
<h3>Conclusion</h3>
<p>As you can see, the UTF-8 plugin offers some valuable new capabilities to Corona developers, in particular those developing apps for international distribution. To learn more, please reference the <a href=https://docs.coronalabs.com/plugin/utf8/index.html target="_blank">documentation</a> or discuss this plugin in the <a href=https://forums.coronalabs.com/forum/631-corona-premium-plugins/ target="_blank">Corona forums</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2016/03/21/introducing-the-utf-8-string-plugin/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Important changes: Loading fonts just got easier!</title>
		<link>/blog/2016/02/25/important-changes-loading-fonts-just-got-easier-in-corona-sdk/</link>
		<comments>/blog/2016/02/25/important-changes-loading-fonts-just-got-easier-in-corona-sdk/#comments</comments>
		<pubDate>Thu, 25 Feb 2016 18:33:13 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Corona SDK]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[fonts]]></category>
		<category><![CDATA[text]]></category>

		<guid isPermaLink="false">/?p=65736</guid>
		<description><![CDATA[Starting with Public Release 2830, we've made custom font loading easier and more consistent. Read on to learn more!]]></description>
				<content:encoded><![CDATA[<p>With the announcement of <a href=/blog/2016/02/22/new-public-release-2016-2830/>Public Release 2830</a> comes changes to how fonts are loaded/displayed.</p>
<p>Previously, the usage of custom fonts was dependent on the operating system and the type of font being used. Sometimes you would need to use a font&#8217;s file name and other times you would use the &#8220;internal font name.&#8221;  Many developers made things easier on themselves by ensuring the font file name and the internal font name matched.</p>
<p>Now, you can simply use the <strong>font file name + extension</strong>. This is consistent across <strong>all</strong> platforms except Windows Phone 8.</p>
<p>For example, to display a custom font where the file name is <code>superfont.ttf</code>, simply use:</p><pre class="crayon-plain-tag">local myText = display.newText( &quot;Hello World!&quot;, 100, 200, &quot;superfont.ttf&quot;, 16 )</pre><p>Windows Phone 8 still has a different requirement which is <code>"#"</code>. Example:</p><pre class="crayon-plain-tag">local myText = display.newText( &quot;Hello World!&quot;, 100, 200, &quot;superfont.ttf#Super Font Regular&quot;, 16 )</pre><p>To simplify working with fonts, you should adopt this new method of loading custom fonts moving forward.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2016/02/25/important-changes-loading-fonts-just-got-easier-in-corona-sdk/feed/</wfw:commentRss>
		<slash:comments>19</slash:comments>
		</item>
		<item>
		<title>Tutorial: Methods for positioning text</title>
		<link>/blog/2014/02/11/tutorial-methods-for-positioning-text/</link>
		<comments>/blog/2014/02/11/tutorial-methods-for-positioning-text/#comments</comments>
		<pubDate>Tue, 11 Feb 2014 21:47:20 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Tutorials, Tips and Demos]]></category>
		<category><![CDATA[display.newText]]></category>
		<category><![CDATA[text]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">/?p=55979</guid>
		<description><![CDATA[At the basic level, creating and positioning text in Corona is simple. However, when you need to position/align text in creative ways, things get a bit more complicated. In this tutorial, we'll inspect the actual display object that Corona generates so that you can understand and achieve advanced positioning and alignment.]]></description>
				<content:encoded><![CDATA[<p>At the basic level, creating and positioning <a href=http://docs.coronalabs.com/api/library/display/newText.html target="_blank">text</a> in Corona SDK is simple: just create the object at the desired position in the specified font size and you&#8217;re done. For example:</p><pre class="crayon-plain-tag">local myText = display.newText( &quot;Hello World&quot;, 200, 200, native.systemFont, 16 )</pre><p>However, when you need to position/align text in creative ways, things get a bit more complicated. In this tutorial, we&#8217;ll inspect the actual display object that Corona generates via <a href=http://docs.coronalabs.com/api/library/display/newText.html target="_blank">display.newText()</a> so that you can understand and achieve advanced positioning and alignment.</p>
<h3>The basics</h3>
<p>Under the hood, Corona takes the information that you pass to the <a href=http://docs.coronalabs.com/api/library/display/newText.html target="_blank">display.newText()</a> API and it generates an image, rendered to texture memory like any other display object. Because Corona SDK uses the operating system&#8217;s font rendering, fonts may render differently between devices and the Corona Simulator, in particular between Windows and OS X.</p>
<h3>Single-line method</h3>
<p>The most basic usage of <a href=http://docs.coronalabs.com/api/library/display/newText.html target="_blank">display.newText()</a> is the <strong>single-line method</strong>. Using this method, you simply output a string of text to the screen. Once it&#8217;s rendered by Corona, the theoretical &#8220;bounding box&#8221; (indicated by the green line) will fit precisely around the text display object:</p>
<p><img class="alignnone size-full wp-image-55984" src="/wordpress/wp-content/uploads/2014/02/positioningText1.jpg" alt="positioningText1" /></p>
<p>In regards to screen position, the <code>x</code> and <code>y</code> of this &#8220;box&#8221; is based upon its center point. You can, of course, position any text object via this center point, but if you&#8217;re building a series of text objects such as labels on a statistics screen, you&#8217;ll probably want to left-align all of them to a vertical &#8220;guide line.&#8221; This can be accomplished using <a href=http://docs.coronalabs.com/guide/graphics/transform-anchor.html target="_blank">anchor points</a>, where — in regards to the <code>x</code> position — an anchor point of <code>0</code> indicates the left-most point of the object, <code>0.5</code> indicates the center <code>x</code> point, and <code>1</code> indicates the right-most point. A similar concept applies to the <code>y</code> anchor point, where a <code>y</code> anchor of <code>0</code> represents the object&#8217;s top, <code>0.5</code> the vertical middle, and <code>1</code> the object&#8217;s bottom.</p>
<p>Let&#8217;s inspect a basic example:</p><pre class="crayon-plain-tag">local myText = display.newText( &quot;Hello World&quot;, 0, 0, native.systemFont, 16 )
myText:setFillColor( 0, 0, 0 )
myText.anchorX = 0
myText.x = 10
myText.y = 100</pre><p>Because the <code>anchorX</code> value is set to <code>0</code> (the left edge), and the <code>x</code> value is set to <code>10</code>, this code block positions the text with its left edge 10 points to the right of the content area&#8217;s vertical <code>0</code> point. Remember, however, that you&#8217;re not &#8220;aligning the text,&#8221; but rather <em>positioning its bounding box</em> (this point will become more important further on).</p>
<h3>Multi-line method</h3>
<p>For more advanced alignment, you may utilize the <strong>multi-line method</strong>. In this case, you pass a table of <strong>options</strong> to the <a href=http://docs.coronalabs.com/api/library/display/newText.html target="_blank">display.newText()</a> call. Most of these options mimic those from the &#8220;shorthand&#8221; single-line declaration outlined above, but there are three additional properties which extend the alignment possibilities: <code>width</code>, <code>height</code>, and <code>align</code>.</p>
<h4>width</h4>
<p>This property specifies the width of the multi-line &#8220;bounding box&#8221; in pixels. This is similar to drawing a flexible text box in a graphics application like Photoshop or Illustrator, where the text — no matter how much you enter within the box — will wrap within the confines of its boundaries. As expected, if a word is too long to fit within the remaining width available on that line, it will wrap to the next line.</p>
<h4>height</h4>
<p>If specified, the text will be cropped at this value, in pixels. If you want an &#8220;unlimited&#8221; height for the text box, set this value to <code>0</code> and the box height will adjust depending on the amount of text within it. However, it will never exceed the maximum texture size limit for the device.</p>
<h4>align</h4>
<p>This specifies the alignment of the text when the <code>width</code> parameter is supplied. Default value is <code>"left"</code>. Valid values are <code>"left"</code>, <code>"center"</code>, or <code>"right"</code>. We&#8217;ll discuss this in more detail shortly.</p>
<h3>Principles of alignment</h3>
<p>Although it may seem non-intuitive to create a single line of text using the multi-line method, let&#8217;s explore the advantages from Corona&#8217;s standpoint:</p><pre class="crayon-plain-tag">local options = {
   text = &quot;Hello World&quot;,
   x = display.contentCenterX,
   y = display.contentCenterY,
   fontSize = 24,
   width = 200,
   height = 0,
   align = &quot;left&quot;
}

local textBox = display.newText( options )
textBox:setFillColor( 0, 0, 0 )</pre><p>Because the string <strong>Hello World</strong>, in the default system font at size 24, fits within the width of 200 pixels, it won&#8217;t wrap to a second line. Thus, this code visually produces a single line of text. However, while it may appear the same as the first example, it&#8217;s important to understand that the &#8220;bounding box&#8221; is now 200 pixels wide, <strong>not</strong> the pixel width of the actual text that you see on the screen:</p>
<p><a href=/wordpress/wp-content/uploads/2014/02/positioningTextLeft.jpg><img class="alignnone size-full wp-image-55986" src=/wordpress/wp-content/uploads/2014/02/positioningTextLeft.jpg alt="positioningTextLeft" /></a></p>
<p>In this manner, you can build a series of fixed-width text boxes and position them in a more unified manner rather than dealing with various text object sizes produced via the single-line method.</p>
<p>Want to right-align the text? Simply change the <code>align</code> parameter to <code>"right"</code>…</p>
<p><a href=/wordpress/wp-content/uploads/2014/02/positioningTextRight.jpg><img class="alignnone size-full wp-image-55987" src=/wordpress/wp-content/uploads/2014/02/positioningTextRight.jpg alt="positioningTextRight" /></a></p>
<p>Or you may change it to <code>"center"</code>…</p>
<p><a href=/wordpress/wp-content/uploads/2014/02/positioningTextCenter.jpg><img class="alignnone size-full wp-image-55985" src=/wordpress/wp-content/uploads/2014/02/positioningTextCenter.jpg alt="positioningTextCenter" /></a></p>
<p>In addition to these flexible alignment options, another advantage to multi-line method is that it lets you change the value of the <code>.text</code> property and, if the new string is longer or shorter, the box remains at the fixed width and the text won&#8217;t shift unexpectedly. In single-line mode, by comparison, if you position a text object by its center point and change the text string, the object may not align as you intended.</p>
<h3>Multiple lines</h3>
<p>Of course, multi-line mode supports multiple lines as well! Let&#8217;s see how it looks in the three different alignment options:</p>
<p><img class="size-full wp-image-55988 alignright" style="margin-top: 43px; margin-bottom: 0px;" src="/wordpress/wp-content/uploads/2014/02/tpss1.png" alt="tpss1" width="204" height="304" /></p>
<h4>&#8220;left&#8221;</h4>
<p></p><pre class="crayon-plain-tag">local myText = [[This is a long, multi-line string where we are randomly
inserting some blank
lines
of text.]]

local options = {
   text = myText,
   x = display.contentCenterX,
   y = display.contentCenterY,
   width = 200,
   height = 300,
   fontSize = 24,
   align = &quot;left&quot;
}

local textField = display.newText( options )
textField:setFillColor( 0, 0, 0 )</pre><p><img class="size-full wp-image-55988 alignright" style="margin-top: 43px; margin-bottom: 0px;" src="/wordpress/wp-content/uploads/2014/02/tpss2.png" alt="tpss2" width="204" height="304" /></p>
<h4>&#8220;center&#8221;</h4>
<p></p><pre class="crayon-plain-tag">local myText = [[This is a long, multi-line string where we are randomly
inserting some blank
lines
of text.]]

local options = {
   text = myText,
   x = display.contentCenterX,
   y = display.contentCenterY,
   width = 200,
   height = 300,
   fontSize = 24,
   align = &quot;center&quot;
}

--Output the text box with the specified options
local textField = display.newText( options )
textField:setFillColor( 0, 0, 0 )</pre><p><img class="size-full wp-image-55988 alignright" style="margin-top: 43px; margin-bottom: 0px;" src="/wordpress/wp-content/uploads/2014/02/tpss3.png" alt="tpss3" width="204" height="304" /></p>
<h4>&#8220;right&#8221;</h4>
<p></p><pre class="crayon-plain-tag">local myText = [[This is a long, multi-line string where we are randomly
inserting some blank
lines
of text.]]

local options = {
   text = myText,
   x = display.contentCenterX,
   y = display.contentCenterY,
   width = 200,
   height = 300,
   fontSize = 24,
   align = &quot;right&quot;
}

--Output the text box with the specified options
local textField = display.newText( options )
textField:setFillColor( 0, 0, 0 )</pre><p>As you can see, the <code>align</code> option affects the positioning of the text within the box. In all of these examples, the height of the box is defined at <code>300</code>. If you set the <code>height</code> to <code>0</code>, the bounding box will match the actual height of the text. However, this may affect vertical alignment depending on the box&#8217;s <code>y</code> anchor setting. Also, while a <code>height</code> setting of <code>0</code> creates a text box of &#8220;unlimited&#8221; height, the text that is created will never exceed the device&#8217;s texture size limit. This is an important restriction to be aware of if you place a significant amount of text into a single text box.</p>
<h4>On the topic of multiple lines&#8230;</h4>
<p>In Lua, there is some confusion around how to put line breaks into strings. While Lua supports the traditional double quotes (<code>"..."</code>) or single quotes (<code>'...'</code>), it also supports multiple lines via the <code>[[...]]</code> declaration. As such, you may use this method <strong>or</strong> the Unix &#8220;Newline&#8221; character (<code>\n</code>) within quotes:</p><pre class="crayon-plain-tag">longString = [[This is a really
long string
with multiple
line breaks.]]

--OR...
longString = &quot;This is a really\nlong string\nwith multiple\nline breaks.&quot;</pre><p>Note that if you attempt to input multiple lines using Corona&#8217;s single-line method, the line breaks will be ignored.</p>
<h3>In summary</h3>
<p>Hopefully this tutorial has shown you some useful techniques for aligning text in Corona SDK. With the single-line method and the more powerful multi-line method, almost any alignment scenario should be possible with just a few lines of code.</p>
<hr />
]]></content:encoded>
			<wfw:commentRss>/blog/2014/02/11/tutorial-methods-for-positioning-text/feed/</wfw:commentRss>
		<slash:comments>21</slash:comments>
		</item>
		<item>
		<title>Wednesday FAQs: Display Text Objects</title>
		<link>/blog/2013/06/26/wednesday-faqs-display-text-objects/</link>
		<comments>/blog/2013/06/26/wednesday-faqs-display-text-objects/#comments</comments>
		<pubDate>Wed, 26 Jun 2013 21:12:13 +0000</pubDate>
		<dc:creator><![CDATA[tom]]></dc:creator>
				<category><![CDATA[FAQ]]></category>
		<category><![CDATA[corona]]></category>
		<category><![CDATA[CoronaSDK]]></category>
		<category><![CDATA[justification]]></category>
		<category><![CDATA[text]]></category>

		<guid isPermaLink="false">http://blog.coronalabs.com/?p=36836</guid>
		<description><![CDATA[It's Wednesday and time for another frequently asked questions (FAQs) session. Here are some FAQs about display text objects.]]></description>
				<content:encoded><![CDATA[<p><img src="http://blog.coronalabs.com/wp-content/uploads/2013/01/FAQ.png" alt="FAQ Icon" class="alignright size-full wp-image-28552" />It&#8217;s Wednesday and time for another frequently asked questions (FAQs) session. Here are some FAQs about display text objects.</p>
<h2>1. I&#8217;m creating lots of display.newText objects and it&#8217;s slowing down my app. Why?</h2>
<p>It may seem like text is a simple thing to display on the screen but it can be very complicated and time consuming. When you create text with <strong>display.newText</strong>, the text must be first converted into a bit map and then sent to <strong>openGL</strong> so it can be rendered on the screen. The larger the text (in the number of character and font size), the longer this process takes. It also consumes texture memory just like displaying images.</p>
<h2>2. I&#8217;m moving text around on the screen, will that slow down my app?</h2>
<p>Moving or scaling text objects does not slow down Corona SDK. If you are changing the text, the bit map needs to be recreated, which can impact the frame rate. The same is true when changing the font size or the font type. These all require a new bit map and may affect performance.</p>
<h2>3. I&#8217;m using display.newText and see a white or black block where the text should be. What&#8217;s wrong?</h2>
<p>The black or white block is what you see when the text exceeds the texture limit of the device. Since text objects are converted to bit maps before being displayed, long text strings with a large font size can easily exceed the texture memory limit of some low-end devices. The solution is to limit the amount of text displayed in a single <strong>display.newText</strong> object. You should break up large text objects into multiple text objects.</p>
<h2>4. How do I align text?</h2>
<p><img src="http://blog.coronalabs.com/wp-content/uploads/2013/06/FAQ31_image-161x300.png" alt="Text Justification" class="alignright size-medium wp-image-36838" /><br />
Starting with Daily Build 1143 we added text alignment to <a href=http://docs.coronalabs.com/daily/api/library/display/newText.html><strong>display.newText</strong></a>. You can specify &#8220;<strong>left</strong>&#8220;, &#8220;<strong>center</strong>&#8221; and &#8220;<strong>right</strong>&#8221; justification. The only limitation is you can&#8217;t change the justification after the text object has been constructed.</p>
<p>When we added text justification to <strong>display.newText</strong>, we changed the way parameters are supplied to the function. The parameters are now sent in a Lua &#8220;<strong>option</strong>&#8221; table instead of as individual parameters. <strong>display.newText</strong> still supports the legacy call, but you can&#8217;t use it to justify the text. Be aware that if you call <strong>display.newText</strong> with the new option table, you specify <strong>x</strong> and <strong>y</strong> values, which reference the center of the text object and not <strong>left</strong> and <strong>top</strong> used in the legacy call.</p>
<p>In order for text justification to work, you must supply the <strong>width</strong> parameter. If the <strong>height</strong> parameter is not supplied, it&#8217;s assumed to be 0 (this may change in the future). Left justification is assumed if no justification is specified.</p>
<p></p><pre class="crayon-plain-tag">display.setDefault( &quot;background&quot;, 128 )

-- Create a rect to show the boundaries of our text fields
local rect = display.newRect( 50, 35, 200, 150 )
rect:setFillColor( 40 )

-- Right aligned, single line
local textOptions1 = { text = &quot;Line 1 right aligned&quot;, x = 100, y = 50, width = 200, align = &quot;right&quot;, font = native.systemFont, fontSize = 14 }
local text1 = display.newText( textOptions1 )
text1:setReferencePoint( display.TopLeftReferencePoint )
text1.x = 50

-- Center alignment, multiple lines
local textString2 = &quot;Line 1 center aligned\nLine2 center&quot;
local textOptions2 = { text = textString2, x = 150, y = 100, width = 200, height = 0, align = &quot;center&quot;, font = native.systemFont, fontSize = 14 }
local text2 = display.newText( textOptions2 )
text2:setReferencePoint( display.TopLeftReferencePoint )
text2.x = 50

-- No alignment specified
local textOptions3 = { text = &quot;Line defaults to left aligned&quot;, x = 200, y = 150, width = 200, font = native.systemFont, fontSize = 14 }
local text3 = display.newText( textOptions3 )
text3:setReferencePoint( display.TopLeftReferencePoint )
text3.x = 50</pre><p></p>
<p>Text justification also works with custom fonts but you must install the fonts on the Mac or Windows simulator in order to make it work.</p>
<h2>5. Does display.newEmbossedText work with justification?</h2>
<p>Currently, text justification for <strong>display.newEmbossedText</strong> objects is not implemented. We hope to have it in a Daily Build soon.</p>
<p>That&#8217;s it for today&#8217;s questions. I hope you enjoyed them and even learned a few things.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2013/06/26/wednesday-faqs-display-text-objects/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
	</channel>
</rss>
