<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>event listeners &#8211; Corona Labs</title>
	<atom:link href="/blog/tags/event-listeners/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Mon, 19 Oct 2020 12:16:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>/wordpress/wp-content/uploads/2017/06/cropped-icon_32x32@2x-32x32.png</url>
	<title>event listeners &#8211; Corona Labs</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Tutorial: The Finalize API (an Unsung Hero)</title>
		<link>/blog/2015/05/05/tutorial-the-finalize-api-an-unsung-hero/</link>
		<comments>/blog/2015/05/05/tutorial-the-finalize-api-an-unsung-hero/#comments</comments>
		<pubDate>Tue, 05 May 2015 22:43:20 +0000</pubDate>
		<dc:creator><![CDATA[Brent Sorrentino]]></dc:creator>
				<category><![CDATA[Guest Bloggers]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>
		<category><![CDATA[event listeners]]></category>
		<category><![CDATA[finalize]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">/?p=62646</guid>
		<description><![CDATA[In this tutorial, learn about the under-utilized but powerful "finalize" event and how it can be used to keep your app running smoothly.]]></description>
				<content:encoded><![CDATA[<p><em>Jason Schroeder is a New York City-based app developer and Corona Ambassador who has released seven Corona-made apps since he began using Corona SDK in 2011. He is currently working on an independent reboot of the 21-year-old Abrosia Software game “Chiral,” which he expects to release later this year. You can follow Jason on Twitter <strong>@schroederapps</strong> and learn more about Chiral at <a href=http://www.chiralgame.com/ target="_blank">www.chiralgame.com</a>.</em></p>
<hr />
<p>There are over 1,000 Lua APIs for Corona SDK, according to the API Reference. While certain APIs, such as those found in the <a href=https://docs.coronalabs.com/api/library/display/index.html target="_blank">display</a>, <a href=https://docs.coronalabs.com/api/library/audio/index.html target="_blank">audio</a>, and <a href=https://docs.coronalabs.com/api/library/composer/index.html target="_blank">composer</a> libraries are so essential that even the most &#8220;newbie&#8221; developers become instantly familiar with them, there&#8217;s a huge advantage to be gained by regularly browsing the online documentation and discovering hidden gems that you may not have noticed when teaching yourself the basics. One great example of this is the <a href=https://docs.coronalabs.com/api/event/finalize/index.html target="_blank">finalize</a> event API, which gets scandalously little recognition given how useful it is.</p>
<h3>About Events</h3>
<p>Every Corona display object can (and does) dispatch “events” (which take the form of Lua tables) on a regular basis, even if you aren&#8217;t aware of these events or aren&#8217;t responding to them in your code. For example, if a user touches a display object, that object always dispatches an event table containing key/value pairs such as a reference to the dispatching object (<code>event.target</code>) and the coordinates where the user&#8217;s finger is touching the screen (<code>event.x</code> and <code>event.y</code>), among others. By adding a listener function to handle these dispatched events using the <a href=https://docs.coronalabs.com/api/type/EventListener/addEventListener.html target="_blank">object:addEventListener()</a> API, you can make your app respond to this user input. But even if you don&#8217;t add a listener for them, every display object in your app is dispatching &#8220;touch&#8221; events anytime the user&#8217;s finger happens to touch them.</p>
<p>Not unlike touch events, any time a display object is removed from the stage &#8212; usually by calling <a href=http://docs.coronalabs.com/api/library/display/remove.html target="_blank">display.remove()</a> or <a href=http://docs.coronalabs.com/api/type/DisplayObject/removeSelf.html target="_blank">object:removeSelf()</a> &#8212; that object dispatches a <a href=https://docs.coronalabs.com/api/event/finalize/index.html target="_blank">finalize</a> event. I&#8217;d imagine that many Corona developers don&#8217;t bother handling these events, but being able to perform specific actions just as a display object is being destroyed has all sorts of useful applications. I&#8217;ll explore one specific example later on in this post, but first let&#8217;s go over how to listen for finalize events and handle the data that gets passed into our listener function.</p>
<h3>Listening for Finalize Events</h3>
<p>Just like touch listeners, a finalize listener can take the form of a “table listener” or a “function listener.” For the purposes of this tutorial, I&#8217;m going to focus on using a table listener because it&#8217;s my preferred method &#8212; but either type of listener will work, and you should use whatever method works best for you. If you don’t know the difference between these types of listeners, you can read more about it <a href=http://docs.coronalabs.com/daily/guide/events/detectEvents/index.html?#functionvstable target="_blank">here</a>.</p>
<p>Listening for finalize events requires 3 basic steps. First, we create our listener function:</p><pre class="crayon-plain-tag">local function finalizeListener( self, event )
   -- do something when &quot;self&quot; is removed from the stage
   print( &quot;Object removed from stage: &quot;..tostring(self) )
end</pre><p>Next, we add a <code>.finalize</code> property to a display object, pointing to our listener function:</p><pre class="crayon-plain-tag">object.finalize = finalizeListener</pre><p>And finally, we add an event listener to that same object, listening for <code>"finalize"</code> events:</p><pre class="crayon-plain-tag">object:addEventListener( &quot;finalize&quot; )</pre><p>Now, whenever that display object is removed from the stage, our listener function will be triggered, and the console will print out the string <code>"Object removed from stage:"</code> followed by the object&#8217;s table ID.</p>
<h3>Why You Should Use Finalize Listeners</h3>
<p>The code above shows <i>how</i> to listen for finalize events and respond to them, but it doesn&#8217;t really showcase why this is so useful. Honestly, the potential applications of finalize listeners are only limited by your imagination, and the usefulness will depend on the needs of your app &#8212; but let’s look at one specific scenario where a finalize listener can help keep your app running smoothly.</p>
<p>In some cases, you may need to have a display object update itself on every single frame of your app. For example, you could have a text object that displays the user&#8217;s score that needs to be constantly updated, or you might have a character sprite that needs to be repositioned on every frame to keep it centered on the screen. The best way to accomplish these continual updates is through a Runtime <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listener, which is a function that is called every time your app draws a new &#8220;frame.&#8221;</p>
<p>While <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listeners are great tools because they can be run as often as 60 times per second, they can also wreak havoc if you have any errors in your code. And if you attempt to manipulate a display object that has been destroyed in an <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listener (or any <code>nil</code> object), you&#8217;re going to get hit with a show-stopping Runtime error. This is avoided by removing your <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listener before it can attempt to manipulate your soon-to-be-removed display object. While it’s possible to manage this manually, removing <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listeners in the same block of code that destroys your display object, you can save yourself time and headaches by utilizing finalize listeners to automate this process for you, especially in circumstances where you will be removing lots of objects with regularity.</p>
<p>Below is a simple <code>main.lua</code> that creates an app that does the following:</p>
<p>It creates a circle that can be dragged around the screen.</p>
<p>It uses an <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listener to resize the circle as it is dragged, depending on how close it is to the center of the screen</p>
<p>Releasing your finger from the circle will remove the circle from the stage, using <a href=https://docs.coronalabs.com/api/library/display/remove.html target="_blank">display.remove()</a> and re-draw a new circle 500 milliseconds later.</p><pre class="crayon-plain-tag">-- forward declare functions
local onEnterFrame, finalizeListener, touchListener, createCircle

-- function to calculate distance between two points
local function getDistance ( x1, y1, x2, y2 )
   local dx = x1 - x2
   local dy = y1 - y2
   return math.sqrt ( dx * dx + dy * dy )
end

-- enterFrame listener
function onEnterFrame( self, event )
   local distance = getDistance( self.x, self.y, display.contentCenterX, display.contentCenterY )
   local scale = 1 - distance*.005
   self.xScale, self.yScale = scale, scale
end

-- finalize listener
function finalizeListener( self, event )
   Runtime:removeEventListener( &quot;enterFrame&quot;, self )
   print( &quot;Removed enterFrame Listener for &quot;..tostring(self) )
   timer.performWithDelay( 500, createCircle )
end

-- touch listener
function touchListener( self, event )
   if event.phase == &quot;began&quot; then
      display.getCurrentStage():setFocus( self, event.id )
      self.hasFocus = true
   elseif self.hasFocus then
      self.x, self.y = event.x, event.y
      if event.phase == &quot;ended&quot; or event.phase == &quot;cancelled&quot; then
         self.hasFocus = false
         display.getCurrentStage():setFocus( nil, event.id )
         display.remove( self )
      end
   end
end

-- function to create a new circle and add listeners to it
function createCircle()
   local circle = display.newCircle( display.contentCenterX, display.contentCenterY, display.contentHeight*.075 )
   circle.finalize = finalizeListener
   circle:addEventListener( &quot;finalize&quot; )
   circle.enterFrame = onEnterFrame
   Runtime:addEventListener( &quot;enterFrame&quot;, circle )
   circle.touch = touchListener
   circle:addEventListener( &quot;touch&quot; )
end

-- create the first circle
createCircle()</pre><p>Since there is an <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listener used to manipulate the circle, the app will crash if that function is run after removing the circle from the stage. To see this in action, simply comment out line 43 from the code above and run it in the Corona Simulator. As soon as you release your finger from the circle and the circle is removed, you’ll get the following Runtime error:</p>
<p><a href=/wordpress/wp-content/uploads/2015/05/finalize-error1.png><img class="alignnone wp-image-62653" src=/wordpress/wp-content/uploads/2015/05/finalize-error1.png alt="finalize-error" width="800" height="338" /></a></p>
<p>This crash occurs because line 43 is necessary to add our finalize listener to the circle, ensuring that the <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listener is removed when the circle is destroyed. That little listener function is mighty helpful! Keep in mind, also, that the finalize listener in the above code is re-usable: you can add it to any display objects (not just the circle) by setting an object’s <code>.finalize</code> property to &#8220;<code>finalizeListener"</code> and adding a &#8220;<code>finalize"</code> event listener to that object. If your app creates a lot of objects that need to be updated in an <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listener, having just one finalize listener to handle cleanup of those <a href=http://docs.coronalabs.com/api/event/enterFrame/index.html target="_blank">enterFrame</a> listeners can be a real sanity-saver.</p>
<h3>In Conclusion</h3>
<p>This just shows one possible application of finalize listeners, but I hope it gets you thinking about ways you can use Corona’s 1,000+ APIs to streamline your code and help make your development work faster and easier to manage. If you have come up with any especially creative uses of the finalize event API, please share in the comments &#8212; happy coding!</p>
<hr />
]]></content:encoded>
			<wfw:commentRss>/blog/2015/05/05/tutorial-the-finalize-api-an-unsung-hero/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Corona Geek #75 &#8211; Super Meter, Code Snippets, and The Belly App</title>
		<link>/blog/coronageek/corona-geek-hangout-75/</link>
		<comments>/blog/coronageek/corona-geek-hangout-75/#comments</comments>
		<pubDate>Mon, 03 Feb 2014 22:20:25 +0000</pubDate>
		<dc:creator><![CDATA[Charles McKeever]]></dc:creator>
				<category><![CDATA[Corona Geek]]></category>
		<category><![CDATA[Google+ Hangouts]]></category>
		<category><![CDATA[event listeners]]></category>

		<guid isPermaLink="false">/?post_type=coronageek&#038;p=55767</guid>
		<description><![CDATA[Tune into this week's episode of Corona Geek where we discussed Graphics 2.0 updates to Dr. Burton's Corona SDK Books, updates to Ed Maurina's Super Meter, Sergey Lerg's event listener library, and Jen Looper's brand new belly dancer app for iOS!]]></description>
				<content:encoded><![CDATA[<p><iframe src="https://www.youtube.com/embed/V2E6RAR39yw?rel=0" height="436" width="640" frameborder="0"></iframe></p>
<p><img class="alignright  wp-image-477" alt="Corona Geek" src="/wordpress/wp-content/uploads/2012/08/corona-geek-head-transparent-150x150.png" width="105" height="105" srcset="/wordpress/wp-content/uploads/2012/08/corona-geek-head-transparent-150x150.png 150w, /wordpress/wp-content/uploads/2012/08/corona-geek-head-transparent.png 250w" sizes="(max-width: 105px) 100vw, 105px" />Tune into this week&#8217;s episode of Corona Geek where we discussed Graphics 2.0 updates to Dr. Burton&#8217;s <a href=http://bit.ly/1kGS14r target="_blank">Corona SDK Books</a>, updates to Ed Maurina&#8217;s <a href=http://bit.ly/WQA5c4 target="_blank">Super Meter</a>, Sergey Lerg&#8217;s <a href=http://bit.ly/1aXkd2q target="_blank">event listener library</a>, and Jen Looper&#8217;s brand new <a href=http://bit.ly/1eN0Zrt target="_blank">belly dancer app for iOS</a>!</p>
<p><strong>Also mentioned was:</strong></p>
<ul>
<li><a href=http://roomalyzr.com/ target="_blank">Jen&#8217;s Room Painting App</a></li>
<li><a href=http://maddiebearbooks.com/ target="_blank">Maddie Bear Books</a></li>
<li><a href=http://imagemagick.org/ target="_blank">Image Magick commandline tool</a></li>
<li><a href=http://www.macports.org/ target="_blank">Mac Ports</a></li>
<li><a href=http://murphyapps.co/blog/2012/10/18/corona-sdk-tutorial-ios-app-localization target="_blank">Murphy Apps Localization Library</a></li>
</ul>
<p><strong>Thank you for listening to and following Corona Geek:</strong></p>
<ul>
<li><a href=http://bit.ly/19JGUiG target="_blank">Download the Corona Geek podcast on iTunes</a></li>
<li><a href=http://bit.ly/1cm2xtO target="_blank">Listen to Corona Geek on Stitcher</a></li>
<li><a href=http://bit.ly/H0dEgO target="_blank">Subscribe to Corona Geek on YouTube</a></li>
</ul>
<p><strong>Need to market your app?</strong> Sign up for a <a href=http://www.preapps.com/about-us target="_blank">PreApps developer account</a> and use the <strong>promo code &#8220;CoronaLabs&#8221;</strong> at checkout to try their <a href=http://www.preapps.com/featured-options target="_blank">PreApps Featured Feedback app posting</a> free for 30 days. Hurry, offer ends February 28th, 2014.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/coronageek/corona-geek-hangout-75/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
<enclosure url="http://coronageek.coronalabs.com/cdn/corona-geek-show-75-2014-02-03-super-meter-code-snippets-the-belly-app.mp3" length="47162246" type="audio/mpeg" />
<enclosure url="http://coronageek.coronalabs.com/cdn/corona-geek-show-75-2014-02-03-super-meter-code-snippets-the-belly-app.mp3" length="47162246" type="audio/mpeg" />
<enclosure url="http://coronageek.coronalabs.com/cdn/corona-geek-show-75-2014-02-03-super-meter-code-snippets-the-belly-app.mp3" length="47162246" type="audio/mpeg" />
<enclosure url="http://coronageek.coronalabs.com/cdn/corona-geek-show-75-2014-02-03-super-meter-code-snippets-the-belly-app.mp3" length="47162246" type="audio/mpeg" />
		</item>
	</channel>
</rss>
