<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Xcode &#8211; Corona Labs</title>
	<atom:link href="/blog/tags/xcode/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Mon, 19 Oct 2020 12:16:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>/wordpress/wp-content/uploads/2017/06/cropped-icon_32x32@2x-32x32.png</url>
	<title>Xcode &#8211; Corona Labs</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Xcode Requirements: iOS 8.3 + iOS 8.4-beta</title>
		<link>/blog/2015/04/22/xcode-requirements-ios-8-3-ios-8-4-beta/</link>
		<comments>/blog/2015/04/22/xcode-requirements-ios-8-3-ios-8-4-beta/#comments</comments>
		<pubDate>Wed, 22 Apr 2015 22:43:47 +0000</pubDate>
		<dc:creator><![CDATA[walter]]></dc:creator>
				<category><![CDATA[Corona SDK]]></category>
		<category><![CDATA[Daily Build]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Plugins]]></category>
		<category><![CDATA[8.3]]></category>
		<category><![CDATA[Xcode]]></category>

		<guid isPermaLink="false">/?p=62399</guid>
		<description><![CDATA[Apple just released iOS 8.3 SDK, so starting in <a href="https://developer.coronalabs.com/downloads/daily-builds">daily build</a> 2015.2616, Corona Simulator will target iOS 8.3 by default. ]]></description>
				<content:encoded><![CDATA[<p>Apple just released iOS 8.3 SDK, so starting in <a href=https://developer.coronalabs.com/downloads/daily-builds>daily build</a> 2015.2616, Corona Simulator will target iOS 8.3 by default.</p>
<p>As always, the target iOS version does not affect backward compatibility. The apps you build with Corona will still be backwards compatible to iOS 6.0.</p>
<h3>Changes to Xcode Requirements</h3>
<p>Starting with 2015.2616, Corona Simulator will be more stringent about the version of Xcode you have installed (older versions work like before, in a less stringent manner). In particular, when you select a particular target iOS version, you must have the corresponding version of Xcode installed. For example, if you want to target iOS 8.3, you must install Xcode 6.3 which includes iOS 8.3 SDK.</p>
<p>We made these changes due to <a href=https://devforums.apple.com/message/1127742>subtle issues</a> that were introduced in Xcode 6.3. To ensure that device builds for iOS 8.3 work properly with plugins, we had to make Corona Simulator more picky about which version of Xcode it uses; otherwise, device builds involving plugins will fail.</p>
<p>Apple engineers have suggested that this more stringent pairing of iOS SDK version to Xcode version is technically more correct. While Xcode has been more forgiving in the past, we have chosen the more conservative route to minimize chances for future errors that you may encounter.</p>
<h3>Unsupported Xcode versions</h3>
<p>The changes we describe simply mean that you&#8217;ll have to download the appropriate version of Xcode whenever Corona Simulator changes its default iOS version target.</p>
<p>However, if you have a version of Xcode installed that does <strong>not</strong> match what Corona Simulator expects, you can still use it. We call this the &#8220;I&#8217;m feeling lucky&#8221; option. That means, maybe it&#8217;ll work; maybe it won&#8217;t. Either way, you&#8217;re free to try, but you&#8217;re on your own. We won&#8217;t support it.</p>
<p>In this situation, you will see the following warning dialog. You can still proceed, but you&#8217;ll also see a big <code>"UNSUPPORTED"</code> in the iOS SDK pulldown.</p>
<p><a href=/wordpress/wp-content/uploads/2015/04/Screen-Shot-2015-04-22-at-3.21.22-PM.png><img src=/wordpress/wp-content/uploads/2015/04/Screen-Shot-2015-04-22-at-3.21.22-PM.png alt="Corona Simulator iOS SDK mismatch warning" width="563" height="322" class="aligncenter size-full wp-image-62527" /></a></p>
<h3>Multiple versions of Xcode</h3>
<p>Sometimes there are situations where you will want multiple versions of Xcode installed. One reason is that we include access to iOS beta builds, e.g. iOS 8.4-beta is a version you can target in the latest daily build, as shown in the following diagram:</p>
<p><a href=/wordpress/wp-content/uploads/2015/04/Screen_Shot_2015-04-20_at_5_19_16_PM.png><img src=/wordpress/wp-content/uploads/2015/04/Screen_Shot_2015-04-20_at_5_19_16_PM.png alt="Corona Simulator Device Build Dialog Xcode 6.3" width="562" height="322" class="aligncenter size-full wp-image-62521" /></a></p>
<p>In order to access the iOS 8.4-beta target, you must (of course) install that version. You will also need to use <a href=https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcode-select.1.html>xcode-select</a> to ensure that Corona Simulator finds this version of Xcode. You can type <code>xcode-select -p</code> to find out which version of Xcode is currently selected on your system.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2015/04/22/xcode-requirements-ios-8-3-ios-8-4-beta/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Tutorial: Implementing &#8220;SendTo&#8221; with CoronaCards and Swift</title>
		<link>/blog/2014/12/30/tutorial-implementing-sendto-with-coronacards-and-swift/</link>
		<comments>/blog/2014/12/30/tutorial-implementing-sendto-with-coronacards-and-swift/#comments</comments>
		<pubDate>Tue, 30 Dec 2014 20:00:32 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[CoronaCards]]></category>
		<category><![CDATA[Swift]]></category>
		<category><![CDATA[tutorial]]></category>
		<category><![CDATA[Xcode]]></category>

		<guid isPermaLink="false">/?p=60685</guid>
		<description><![CDATA[In this tutorial, we'll implement the native "SendTo" feature in a CoronaCards-based app, allowing for sharing via Twitter, Facebook, and other services, as well as access to features like printing and AirDrop.]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-full wp-image-60689" style="margin: 0px 0px 20px 20px;" src="/wordpress/wp-content/uploads/2014/12/sharingpanel.jpg" alt="sharingpanel" width="200" height="356" />In a previous tutorial, we showed you how to use CoronaCards with Swift. In this tutorial, we&#8217;ll implement a native feature in a <a href=http://coronacards.com/ target="_blank">CoronaCards</a>-based app: the <strong>SendTo</strong> button, recognizable as the following:</p>
<p><img class="alignnone wp-image-60686" src="/wordpress/wp-content/uploads/2014/12/sendTo.png" alt="sendTo" width="33" height="27" /></p>
<p>In many iOS apps, when you press the <strong>SendTo</strong> button, it brings up a &#8220;sharing panel&#8221; that lets you share your information via Twitter, Facebook, and other services, as well as providing access to features like printing and AirDrop. In native terms, this panel is known as an <a href=https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityViewController_Class/index.html target="_blank">UIActivityViewController</a>. Conveniently, this can be implemented using <a href=http://coronacards.com/ target="_blank">CoronaCards</a>.</p>
<p>Before you proceed, ensure that you have already installed the CoronaCards templates from the previous tutorial and that you can build the project presented therein.</p>
<h3>Setting Up</h3>
<p>First, create a new Xcode project using the CoronaCards &#8220;Single View&#8221; template. Then, give your project a name and copy your CoronaCards <code>license.ccdata</code> file to the core project folder where <code>main.lua</code> is located.</p>
<h3>The Corona Side</h3>
<p>The CoronaCards template provides you with the &#8220;HelloPhysics&#8221; sample app as a starting point, and this tutorial will build upon it. Our &#8220;SendTo&#8221; Corona app will provide a button to invoke the sharing, but first we need something to share. Toward this end, the app will capture the screen using <a href=http://docs.coronalabs.com/api/library/display/captureScreen.html target="_blank">display.captureScreen()</a> and save it to a temporary file using <a href=http://docs.coronalabs.com/api/library/display/save.html target="_blank">display.save()</a>. Then, the code will send an event to the native side where the <code>UIActivityViewController</code> will be shown, and this event will contain a text message, the captured image, and a URL. When the controller finishes, it will trigger an event back in the Corona side that will tell your app if it was completed and what service was chosen. Finally, a <a href=http://docs.coronalabs.com/api/library/display/newText.html target="_blank">display.newText()</a> object will be used to show the results.</p><pre class="crayon-plain-tag">---------------------------------------------------------------------------------------
-- A simple physics example in 8 lines!
---------------------------------------------------------------------------------------

local physics = require( &quot;physics&quot; )
--
-- Hello Physics Sample app
--
physics.start()

local sky = display.newImage( &quot;sky.png&quot;, 160, 195 )
local ground = display.newImage( &quot;ground.png&quot;, 160, 445 )

local crate = display.newImage( &quot;crate.png&quot;, 180, -50 )
crate.rotation = 5

physics.addBody( ground, &quot;static&quot;, { friction=0.5, bounce=0.3 } )
physics.addBody( crate, { density=3.0, friction=0.5, bounce=0.3 } )

--
-- Set up the share &quot;button&quot; and result text object
--
local shareText  -- Forward declare the button
local resultText = display.newText( &quot;&quot;, display.contentCenterX, 20,  &quot;HelveticaNeue&quot;, 20 )

--
-- Set up the communications to Swift
--
local function handleTap( event )
    --
    -- Capture the screen
    -- Also, hide the button initially
    --
    shareText.isVisible = false
    local screen = display.captureScreen( false )
    --
    -- Save the capture to the temporary directory
    --
    display.save( screen, { filename=&quot;screencapture.jpg&quot;, baseDir=system.TemporaryDirectory, isFullResolution=true, backgroundColor={0,0,0,0} } )
    screen:removeSelf()
    screen = nil
    --
    -- Show the button
    --
    shareText.isVisible = true

    local event = {
        name = &quot;coronaView&quot;,
        message = &quot;I just watched Hello Physics!&quot;,
        image = { filename=&quot;screencapture.jpg&quot;, baseDir=system.TemporaryDirectory },
        url = &quot;&quot;/
    }
    -- Dispatch the data to the global Runtime object
    Runtime:dispatchEvent( event )
    return true
end

shareText = display.newText( &quot;Share&quot;, display.contentCenterX, 200, &quot;HelveticaNeue&quot;, 24 )
shareText:addEventListener( &quot;tap&quot;, handleTap )
shareText.x = display.contentCenterX
shareText.y = display.contentHeight - 15

--
-- Set up a listener to handle return event from Swift
--
local function sendToComplete( event )
    print( &quot;sendToComplete&quot; )
    print( event.name )  -- String value of &quot;sendTo&quot;
    print( event.complete )  -- Boolean of true or false
    print( event.activity )  -- Activity name

    if ( event.complete ) then
        resultText.text = &quot;Shared by &quot; .. event.activity
    else
        resultText.text = &quot;Cancelled&quot;
    end
    return true
end

Runtime:addEventListener( &quot;sendTo&quot;, sendToComplete )</pre><p>Let&#8217;s inspect the key aspects of this code. Pressing the share &#8220;button&#8221; (<code>shareText</code>) triggers the object&#8217;s handler function, <code>handleTap()</code>, inside which the screen is captured. It then saves the captured screen to the <code>system.TemporaryDirectory</code> folder. Next, an event table is constructed. The native side listens for an event called <code>coronaView</code>, and it expects some text, a URL, and an image, so we add those items to the event table.  Finally, we dispatch the event to the global Runtime.</p>
<p>When the <code>UIActivityViewController</code> finishes (see below), it sends an event back to the CoronaCards side.  This requires a Runtime event listener that we&#8217;ll call <code>sendTo</code>, and it will communicate whether the information was shared or if it was cancelled. If shared, it will return the method which was used.</p>
<h3>The Swift Side</h3>
<p>On the Swift side, we need to make several changes to the <code>ViewController.swift</code> file. For reference, the entire file looks like this:</p><pre class="crayon-plain-tag">//
//  ViewController.swift
//  ActivityController
//
//  Created by Rob Miracle on 12/28/14.
//  Copyright (c) 2014 Corona Labs. All rights reserved.
//

import UIKit

class ViewController : CoronaViewController, CoronaViewDelegate
{
	var coronaView: CoronaView! = nil
	override func viewDidLoad()
	{
		super.viewDidLoad()
		// Do any additional setup after loading the view, typically from a nib.

		coronaView = self.view as CoronaView // Force downcast
		coronaView.coronaViewDelegate = self
		coronaView.run()
	}

	override func didReceiveMemoryWarning()
	{
		super.didReceiveMemoryWarning()
		// Dispose of any resources that can be recreated.
	}
    
    func coronaView(view: CoronaView, receiveEvent event: NSDictionary) -&gt; AnyObject? {
        /*
            event dictionary contains:
            message = text to share
            image = NSDictionary with file name and path
            url = URL to post
        */
        
        let message: String = event[&quot;message&quot;] as String
        let imageData = event[&quot;image&quot;] as NSData
        let image:UIImage = UIImage(data: imageData as NSData)!
        let myURL:String = event[&quot;url&quot;] as String
        let url = NSURL(string: myURL)
        
        shareTextImageAndURL(sharingText: message, sharingImage: image, sharingURL: url)
        return(true)
    }
    
    func shareTextImageAndURL(#sharingText: String?, sharingImage: UIImage?, sharingURL: NSURL?) {
        var sharingItems = [AnyObject]()
        var view = self.view as CoronaView
        
        if let text = sharingText {
            sharingItems.append(text)
        }
        if let image = sharingImage {
            sharingItems.append(image)
        }
        if let url = sharingURL {
            sharingItems.append(url)
        }
        
        let activityViewController = UIActivityViewController(activityItems: sharingItems, applicationActivities: nil)

        activityViewController.completionHandler = {(activityType, completed:Bool) in
            if !completed {
                println(&quot;cancelled&quot;)
                let event = [&quot;name&quot;:&quot;sendTo&quot;, &quot;complete&quot;:false]
                view.sendEvent(event)
                return
            } else {
                println(&quot;complete \(activityType)&quot;)
                let event = [&quot;name&quot;:&quot;sendTo&quot;, &quot;complete&quot;:true, &quot;activity&quot;:activityType]
                view.sendEvent(event)
            }
        }
        self.presentViewController(activityViewController, animated: true, completion: nil)
    }
}</pre><p>The first change is setting up a delegate to handle the events &#8212; this is how other controllers can &#8220;talk&#8221; to your CoronaView on the CoronaCards side. We also add the <code>CoronaViewDelegate</code> to the end of the class declaration.</p>
<p>The event handler which receives the event from CoronaCards needs to be called <code>coronaView</code>. So, we must rename <code>view</code> to <code>coronaView</code> and declare it as part of the <code>ViewController</code> class. Also, we&#8217;ll hook up the delegate prior to running the CoronaView.</p>
<p>Next, we need to set up the event handling function which will receive the data from Corona. Inside the function, we extract the various fields from the event table. Interestingly, the image entry does not include the file name and path, but rather the binary image data, and this arrives as a <code>NSData</code> type which we can convert to a <code>UIImage</code> type. In addition, we convert the URL from a string to an <code>NSURL</code>.</p>
<p>With the data ready to go, we call the function <code>shareTextImageAndURL</code>, passing the objects to the function. The <code>shareTextImageAndURL</code> function simply looks for each of the three objects and adds them to the <code>sharingItems</code> array.</p>
<p>Finally, we create the <code>UIActivityViewController</code>, initializing it with our items to share, and instruct it to use all available options. For the completion handler for <code>UIActivityViewController</code>, if the controller was cancelled, we set up an event table named <code>sendTo</code> (as defined on the CoronaCards side) and set the <code>complete</code> entry to <code>false</code>. In the <code>else</code> clause, we set up an event table with <code>complete</code> set to <code>true</code> and set <code>activity</code> to the <code>activityType</code>. In both cases, we send the event to the CoronaCards view. Finally, we instruct the controller to show via the <code>presentViewController()</code> command.</p>
<h3>Conclusion</h3>
<p>As demonstrated in this tutorial, <a href=http://coronacards.com/ target="_blank">CoronaCards</a> gives you access to a wide range of native features which allow you to expand the power of your Corona-based project. As always, please contribute with questions and comments below.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2014/12/30/tutorial-implementing-sendto-with-coronacards-and-swift/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Apple requires apps to be built with Xcode 5.1.1</title>
		<link>/blog/2014/05/19/apple-requires-apps-to-be-built-with-xcode-5-1-1/</link>
		<comments>/blog/2014/05/19/apple-requires-apps-to-be-built-with-xcode-5-1-1/#comments</comments>
		<pubDate>Mon, 19 May 2014 22:38:44 +0000</pubDate>
		<dc:creator><![CDATA[walter]]></dc:creator>
				<category><![CDATA[Corona SDK]]></category>
		<category><![CDATA[iPhone]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[App Store Compliance]]></category>
		<category><![CDATA[Xcode]]></category>

		<guid isPermaLink="false">/?p=58605</guid>
		<description><![CDATA[Apple quietly posted <a href="https://developer.apple.com/news/?id=04252014a">this announcement</a> requiring <strong>all</strong> iOS developers to "Build Your Apps With Xcode 5.1.1". Apple enforces this when you try to upload your binary to the iTunes App Store:

<blockquote>ERROR ITMS-9000: "This bundle is invalid. New apps and app updates submitted to the App Store must be built with public (GM) versions of XCode 5.1.1 or higher and iOS 7 SDK. Do not submit apps built with beta software.”
</blockquote>

Today, we've addressed this in the last public release (2189). Just rebuild and submit. You can also use daily builds 2306 or later.]]></description>
				<content:encoded><![CDATA[<p>Apple quietly posted <a href=https://developer.apple.com/news/?id=04252014a>this announcement</a> requiring <strong>all</strong> iOS developers to &#8220;Build Your Apps With Xcode 5.1.1&#8221;. Apple enforces this when you try to upload your binary to the iTunes App Store:</p>
<blockquote><p>ERROR ITMS-9000: &#8220;This bundle is invalid. New apps and app updates submitted to the App Store must be built with public (GM) versions of XCode 5.1.1 or higher and iOS 7 SDK. Do not submit apps built with beta software.”
</p></blockquote>
<p>(BTW, technically, Xcode 5.1 was GM, not beta as the error message suggests, but Apple gets to write the rules&#8230;)</p>
<p>Today, we&#8217;ve found a way to address this issue. You can now use the last public release (2189) — simply redo your device build and submit. In addition, you can use daily builds 2306 or later, as these have been built with Xcode 5.1.1.</p>
]]></content:encoded>
			<wfw:commentRss>/blog/2014/05/19/apple-requires-apps-to-be-built-with-xcode-5-1-1/feed/</wfw:commentRss>
		<slash:comments>25</slash:comments>
		</item>
	</channel>
</rss>
