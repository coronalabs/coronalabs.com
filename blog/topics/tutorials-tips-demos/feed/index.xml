<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Tutorials, Tips and Demos &#8211; Corona Labs</title>
	<atom:link href="/blog/topics/tutorials-tips-demos/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Mon, 19 Oct 2020 12:16:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>/wordpress/wp-content/uploads/2017/06/cropped-icon_32x32@2x-32x32.png</url>
	<title>Tutorials, Tips and Demos &#8211; Corona Labs</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>A simple progressView for Corona</title>
		<link>/blog/2019/09/27/a-simple-progressview-for-corona/</link>
		<pubDate>Fri, 27 Sep 2019 21:10:54 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=76330</guid>
		<description><![CDATA[Corona's APIs make many things simple, but some times, convenience methods can be more complicated that just doing it yourself. Theming  a widget.newProgressBar() is a great example. In this tutorial you can see how to build your own custom progress bar in less than 20 lines of code!]]></description>
				<content:encoded><![CDATA[<p>One of the things that makes Corona great is that we offer over 1,000 API calls to make your life as a developer easier. This includes various convenience APIs that make our simple-to-use APIs even simpler.</p>
<p>However, sometimes those convenience methods can be less of a convenience and more of a headache when you try to use them beyond what they were designed for. Let&#8217;s examine the <code>widget.*</code> library as an example.</p>
<p>The <code>widget.*</code> library contains API&#8217;s to create <em>buttons</em>, <em>switches</em>, <em>tableViews</em> and more, but they were created with the intention of emulating the look and feel of iOS and Android UI elements. Corona Labs eventually added options to alter their look so they could be themed to fit your game or app better. The problem is trying to theme these widgets can be more complex than building a custom widget on your own. One of these widgets is the <code>widget.newProgressView</code>.</p>
<p>In its simplest setup, the <code>widget.newProgressView</code> is quite simple:</p><pre class="crayon-plain-tag">local widget = require( "widget" )

local progressView = widget.newProgressView({
        left = 50,
        top = 100,
        width = 220,
        isAnimated = true
    })

progressView:setProgress( 0.5 )</pre><p>And you get:<br />
<img class="aligncenter size-medium wp-image-76331" src="/wordpress/wp-content/uploads/2019/09/progressViewDefault-300x46.png" alt="" width="300" height="46" srcset="/wordpress/wp-content/uploads/2019/09/progressViewDefault-300x46.png 300w, /wordpress/wp-content/uploads/2019/09/progressViewDefault-125x19.png 125w, /wordpress/wp-content/uploads/2019/09/progressViewDefault.png 456w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>when the progress is set to 50%. It&#8217;s a simple iOS-like progressView. If you change the widget theme to Android, it will be more familiar to native Android apps. But what if you want to do something that fits your app better? Well you can use image sheets to do that. Let&#8217;s look at the code first:</p><pre class="crayon-plain-tag">local options = {
    width = 64,
    height = 64,
    numFrames = 6,
    sheetContentWidth = 384,
    sheetContentHeight = 64
}
local progressSheet = graphics.newImageSheet( "widget-progress-view.png", options )

local progressView = widget.newProgressView({
        sheet = progressSheet,
        fillOuterLeftFrame = 1,
        fillOuterMiddleFrame = 2,
        fillOuterRightFrame = 3,
        fillOuterWidth = 64,
        fillOuterHeight = 64,
        fillInnerLeftFrame = 4,
        fillInnerMiddleFrame = 5,
        fillInnerRightFrame = 6,
        fillWidth = 64,
        fillHeight = 64,
        left = 50,
        top = 200,
        width = 220,
        isAnimated = true
    })

progressView:setProgress( 0.5 )</pre><p>There is a lot more you have to do to set it up code wise, but in addition you have to provide an image sheet that has to be specially constructed. It&#8217;s a six frame, 64px X 64px per frame image, where you have an outer frame and an inner fill. Frames 1 &amp; 3 represent the end-caps of the outer frame, frames 4 &amp; 6 represent the fill of the end caps. Frame 2 is the outer frame that&#8217;s stretched to fill the size you&#8217;ve set (width = 220 above) and frame 5 is the actual progress image that will be stretched to the percentages the view is set to. Even with this, it&#8217;s limited. This image sheet (ignore the background colors, they are there just to show you each frame):<br />
<img class="aligncenter size-medium wp-image-76333" src="/wordpress/wp-content/uploads/2019/09/widget-progress-view-300x50.png" alt="" width="300" height="50" srcset="/wordpress/wp-content/uploads/2019/09/widget-progress-view-300x50.png 300w, /wordpress/wp-content/uploads/2019/09/widget-progress-view-125x21.png 125w, /wordpress/wp-content/uploads/2019/09/widget-progress-view.png 384w" sizes="(max-width: 300px) 100vw, 300px" /><br />
will result in a progressView that looks like:<br />
<img class="aligncenter size-full wp-image-76335" src="/wordpress/wp-content/uploads/2019/09/widget-progress-view-final.png" alt="" width="208" height="64" srcset="/wordpress/wp-content/uploads/2019/09/widget-progress-view-final.png 208w, /wordpress/wp-content/uploads/2019/09/widget-progress-view-final-125x38.png 125w" sizes="(max-width: 208px) 100vw, 208px" /></p>
<p>That frame and fill may not be what you want. What if you want to have something like a red to yellow to green gradient and perhaps have a pointer that shows where in the red to green range you are? Well you can&#8217;t really do that with this widget. Why? Because the middle frames stretch to the width and then the end caps are added.</p>
<p>But you can do this with one image and one display.newRect() if you don&#8217;t mind rectangles, or a third image to act as a mask if you want rounded corners.</p>
<p>Let&#8217;s look at an example that will give you that gradient &#8220;temperature gauge&#8221;. Starting with this image and mask:</p>
<p><img class="aligncenter size-full wp-image-76337" src="/wordpress/wp-content/uploads/2019/09/pvBackground.png" alt="" width="200" height="40" srcset="/wordpress/wp-content/uploads/2019/09/pvBackground.png 200w, /wordpress/wp-content/uploads/2019/09/pvBackground-125x25.png 125w" sizes="(max-width: 200px) 100vw, 200px" /><br />
and:<br />
<img class="aligncenter size-full wp-image-76339" src="/wordpress/wp-content/uploads/2019/09/pvMask.png" alt="" width="216" height="56" srcset="/wordpress/wp-content/uploads/2019/09/pvMask.png 216w, /wordpress/wp-content/uploads/2019/09/pvMask-125x32.png 125w" sizes="(max-width: 216px) 100vw, 216px" /></p>
<p>The image will be the background of our progressView and the mask will be used to give it rounded corners. We will also use a <code>display.newRect()</code> and fill it with a navy blue color that will block out the percentage of the gradient that hasn&#8217;t been reached yet. At 75% progress we should have something that looks like:</p>
<p><img class="aligncenter size-medium wp-image-76341" src="/wordpress/wp-content/uploads/2019/09/gradientPVExample-300x87.png" alt="" width="300" height="87" srcset="/wordpress/wp-content/uploads/2019/09/gradientPVExample-300x87.png 300w, /wordpress/wp-content/uploads/2019/09/gradientPVExample-400x116.png 400w, /wordpress/wp-content/uploads/2019/09/gradientPVExample-125x36.png 125w, /wordpress/wp-content/uploads/2019/09/gradientPVExample.png 402w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>The code for this is quite simple. Let&#8217;s make a function to create a new gradient progressView and also create a method to set the percentage.</p><pre class="crayon-plain-tag">local function customProgressView(percent)
    local thisProgressView = display.newGroup()
    thisProgressView.backgound = display.newImageRect(thisProgressView, "pvBackground.png", 200, 40)
    local mask = graphics.newMask("pvMask.png")
    thisProgressView:setMask(mask)
    thisProgressView.progress = display.newRect(thisProgressView, 100, 0, 200, 40)
    thisProgressView.progress:setFillColor(0,0.25, 0.5)
    thisProgressView.progress.anchorX = 1
    thisProgressView.progress.width = 200 - (percent * 200)

    function thisProgressView:setProgress( percent )
        self.progress.width = 200 - (percent * 200)
    end

    return thisProgressView
end

local progressView3 = customProgressView(0)
progressView3:setProgress( 0.75 )

progressView3.x = display.contentCenterX
progressView3.y = 350</pre><p>Start by creating a <code>display.newGroup()</code> to hold the progressView. This will not only serve as a single display object that we can easily position, but also act as a table to hold the three display objects and the function to set the percentage. The function will return a handle to the <code>display.newGroup()</code> that you will manipulate in your code.</p>
<p>Next set the background image using a <code>display.newImageRect()</code> to load our gradient background image. This tutorial hard codes the size, but you can easily pass size parameters to the creation function. A <code>graphics.newMask()</code> is added to the group, so that any other display objects added to the group will be affected by the mask.</p>
<p>A <code>display.newRect()</code> is created and stored in the group as well. This will hide the progress yet to be achieved. This requires a little trickery to work right. Anchor the rectangle to the right side. Set the color and use the <code>.width</code> value of the rectangle to size it to how much you want to block.</p>
<p>Add a function to the group that can be used to set the percentage after the initial creation. It&#8217;s the same math used above.</p>
<p>Finally return the group to the calling function. Then in the calling function, you can initialize the progressView and then set the percentage.</p>
<p>The entire function and code to position and set the value 22 lines of code. Trying to use the <code>widget.newProgressView()</code>&#8216;s theming option is 28 lines (plus the widget itself!), can&#8217;t do this kind of customization, and is more code.</p>
<p>Hopefully this will demonstrate that some things you think are hard are actually pretty simple.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Functions and return statements in Corona</title>
		<link>/blog/2019/09/13/functions-and-return-statements-in-corona/</link>
		<pubDate>Fri, 13 Sep 2019 19:19:51 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Lua]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=76309</guid>
		<description><![CDATA[Functions are one of the most useful tools in a programmer's tool box. But how do you make the best use of this tool? This tutorial can help you understand how functions work.]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-thumbnail wp-image-62993" src="/wordpress/wp-content/uploads/2015/06/code-feature-150x150.png" alt="" width="150" height="150" srcset="/wordpress/wp-content/uploads/2015/06/code-feature-150x150.png 150w, /wordpress/wp-content/uploads/2015/06/code-feature.png 250w" sizes="(max-width: 150px) 100vw, 150px" />A question was raised on the various Corona support channels: &#8220;What is the <code>return</code> statement and when do I need to use it?&#8221; Before that question can be answered, you need to understand what functions are and how Lua uses them.</p>
<p>Functions are blocks of code that can be reused. Consider changing a car tire:</p>
<ol style="padding-left:40px; line-height:10px;">
<li>Take out jack, lug wrench and spare tire from trunk</li>
<li>Put the lug wrench on nut #1</li>
<li>Rotate counter-clockwise until the nut comes off</li>
<li>Put the lug nut in a safe place</li>
<li>Put the lug wrench on nut #2</li>
<li>Rotate counter-clockwise until the nut comes off</li>
<li>Put the lug nut in a safe place</li>
<li>Put the lug wrench on nut #3</li>
<li>Rotate counter-clockwise until the nut comes off</li>
<li>Put the lug nut in a safe place</li>
<li>Put the lug wrench on nut #4</li>
<li>Rotate counter-clockwise until the nut comes off</li>
<li>Put the lug nut in a safe place</li>
<li>Put the lug wrench on nut #5</li>
<li>Rotate counter-clockwise until the nut comes off</li>
<li>Put the lug nut in a safe place</li>
<li>Jack up the car</li>
<li>Remove the flat tire</li>
<li>Put the spare tire on</li>
</ol>
<p>etc.</p>
<p>Computer code executes in a linear fashion. If you were to write this out in computer code you end up repeating yourself multiple times. It makes more sense to take the lug nut removal code and put it in a function. Consider this pseudo-code:</p>
<p></p><pre class="crayon-plain-tag">Function removeLugNut( lugNutNunber )
     Put the lug wrench on nut # lugNutNumber
     Rotate counter-wise until the nut comes off.
     Put the lug nut in a safe place</pre><p> </p>
<p>This reduces our algorithm to:</p>
<ol style="padding-left:40px; line-height:10px;">
<li>Take out jack, lug wrench and spare tire from trunk</li>
<li>For each lugNutNumber</li>
<li>removeLugNut( lugNutNumber)</li>
<li>Jack up the car</li>
<li>Remove the flat tire</li>
<li>Put the spare tire on</li>
</ol>
<p>The code is much more compact. It follows a main developer principle called <strong>DRY &#8211; Don&#8217;t Repeat Yourself</strong>.</p>
<p>Functions can be used in a variety of ways in Corona apps. Let&#8217;s look at a basic example:</p><pre class="crayon-plain-tag">local function movePlayer()
      player.x = player.x + 1
end</pre><p>This function does not need any information. It uses an existing defined object: <code>player</code> and increments its <code>.x</code> position by one. It takes no parameters and doesn&#8217;t pass any data back to the calling code. You might use this inside another function that runs every clock tick:</p><pre class="crayon-plain-tag">local function enterFrameListener()
       movePlayer()
end</pre><p>Since you don&#8217;t put anything inside the parentheses, you are sending nothing to the function. But you could easily pass information to the function. You may want to make this function a little more generic. Instead of <code>movePlayer</code>, you could say <code>moveObject</code>. You could also provide the speed:</p><pre class="crayon-plain-tag">local function moveObject( object, speed )
       object.x = object.x + speed
end

local function enterFrameListener()
      moveObject( player, 1)
end</pre><p>Now that you know how to pass information to a function what about getting it back? First, not all functions need to send data back, but when you do, you can do so using Lua&#8217;s <code>return</code> statement.</p>
<p>At the machine code level, all of the above functions have an implied <code>return</code> statement. As a convenience to Lua developers, you don&#8217;t need to specify one if you don&#8217;t need it, thus:</p><pre class="crayon-plain-tag">local function moveObject( object, speed )
       object.x = object.x + speed
end</pre><p>and</p><pre class="crayon-plain-tag">local function moveObject( object, speed )
       object.x = object.x + speed
       return nil
end</pre><p>are identical.</p>
<p>The <code>return</code> statement has two main purposes. First, it can be used to force a function to end early. Let&#8217;s look at that example:</p><pre class="crayon-plain-tag">local function moveObject( object, speed )
       If object == nil or object.x == nil then
            -- This isn't a display object, so exit the function without doing any more work
            return
       end
       object.x = object.x + speed
end</pre><p>Since the code didn&#8217;t have a valid object to change the value of <code>x</code> on, you can exit the function and avoid a potential error.</p>
<p>The second use of a <code>return</code> statement is to pass information back to the code that called the function, That information could be a simple success or failure indicator, or it could pass back values that are more useful. Let&#8217;s look at the simple success/failure situation modifying above function.</p><pre class="crayon-plain-tag">local function moveObject( object, speed )
       if object == nil or object.x == nil then
            -- This isn't a display object, so exit the function without doing any more work
            return false -- let the calling code know it failed
       end
       object.x = object.x + speed
       return true -- the function successful, so let the caller know.
end</pre><p>To receive the data, the code calling the function can either store the return value in a variable or test it in a conditional test.</p><pre class="crayon-plain-tag">local function enterFrameListener()
      if not moveObject( player, 1) then
           print("The object failed to move since object isn't a display object")
      end
end</pre><p>Sometimes you need to capture the values. Let&#8217;s look at this simple function that adds two numbers together:</p><pre class="crayon-plain-tag">local function addTwoNumbers( num1, num2 )
        local sum = num1 + num2
        return sum
end

local sum = addTwoNumbers(10, 20)
print("The sum is", sum)</pre><p>Now you can pass data to the function as well as receive information back using the return statement.</p>
<p>Most programming languages can only return one value (though it could be a table, dictionary, or list with multiple values). Lua, however lets you return multiple values. Lets go back to the <code>moveObject</code> function.</p><pre class="crayon-plain-tag">local function moveObject( object, speed )
       if object == nil or object.x == nil then
            -- This isn't a display object, so exit the function without doing any more work
            return false, "This does not appear to be a display object" -- let the calling code know it failed
       end
       object.x = object.x + speed
       return true, "Success"  -- the function successful, so let the caller know.
end

local function enterFrameListener()
      local success, message = moveObject( player, 1)
      if not success then
           print( message )
      end
end</pre><p>You can see from this tutorial how the <code>return</code> statement can be useful in your Corona adventures.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Extending Corona libraries without native coding</title>
		<link>/blog/2019/07/09/extending-corona-libraries-without-native-coding/</link>
		<pubDate>Tue, 09 Jul 2019 21:34:18 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Lua]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=76297</guid>
		<description><![CDATA[Matthew Webster provides a cool feature of Lua that lets you extend existing libraries without having to write your own native code in this tutorial.]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-full wp-image-62993" src="/wordpress/wp-content/uploads/2015/06/code-feature.png" alt="" width="250" height="250" srcset="/wordpress/wp-content/uploads/2015/06/code-feature.png 250w, /wordpress/wp-content/uploads/2015/06/code-feature-150x150.png 150w" sizes="(max-width: 250px) 100vw, 250px" />This is a guest post by long time Corona user Matthew Webster.</p>
<p>While Corona is simple, powerful and has many useful APIs, there&#8217;s always that <em>one extra thing</em>. Often, the one thing is apparently simple enough to be incorporated into an existing Lua API, but may appear forgotten about.</p>
<p>This tutorial will show you how to:</p>
<ul>
<li>Add new functionality to the existing libraries</li>
<li>Extend the existing functionality</li>
</ul>
<h3>Corona library APIs</h3>
<p>All functionality in Corona are provided by library APIs. The documentation for which is <a href=http://docs.coronalabs.com/api/index.html target="_blank" rel="noopener">found here</a>.</p>
<p>If we take a look at the <code>'string.*'</code> API we can see a collection of functions such as:</p>
<ul>
<li>string.find()</li>
<li>string.format()</li>
<li>string.gsub()</li>
<li>string.len()</li>
<li>string.lower()</li>
</ul>
<p>It happens that all of these functions are not written in Lua, they are handles into lower level functions provided in either C++ (cross platform), Objective-C (for iOS) or Java (for Android.) The same is true for libraries like the <code>'math.*'</code> APIs.</p>
<p>Some APIs, however, are provided completely in Lua, for example Corona&#8217;s <code>'widget.*'</code> API is entirely written in Lua. Corona Labs have even made the original source code available!</p>
<p>Whichever implementation the Corona Labs engineers have chosen to go with their code, the fact still stands that in our Lua world each function has its hands firmly tied to the rules of Lua. In fact, every library (including the <code>'string.*'</code> API) is actually a table. That&#8217;s right: <code>'string'</code> is a table and all the functions defined above are members of that table.</p>
<p>This allows us to do some really clever things quite easily.</p>
<h3>A Useful Function</h3>
<p>The first thing we&#8217;ll learn is how to add our own functions to Corona SDKs own API Libraries. Why would we want to do that? Well, let&#8217;s say you&#8217;ve written a really useful function which removes the leading and trailing spaces from a string. In most languages this is usually called <code>'trim()'</code>:</p><pre class="crayon-plain-tag">local function trim( str )
    return (str:gsub("^%s*(.-)%s*$", "%1"))
end</pre><p>Don&#8217;t worry about what is actually happening inside the function. Just know that you&#8217;ve written it, it&#8217;s awesome and works really well when you want have a string which has really annoying spaces at the startand end:</p>
<p><code>print( trim( " Hello World! " ) )</code></p>
<p>Outputs:</p>
<p><code>Hello World!</code></p>
<p>The normal practice for many Corona developers is to put this <code>'trim()'</code> function into a library file, such as<br />
&#8220;<code>utils.lua</code>&#8220;. What we want to do is make it a bit more memorable and categorically accurate&#8230; This function is<br />
a string function, so it should be accessed like the other string functions.</p>
<h3>Adding to Corona&#8217;s APIs</h3>
<p>To be clear, our function is in a file called <code>"utils.lua"</code> so we want all the work done in that file. Of course, <code>"utils.lua"</code> will be loaded into memory in our <code>"main.lua"</code> with a standard <code>'require'</code> call:</p>
<p><code>require("utils")</code></p>
<p>The function in the <code>"utils.lua"</code> looks like this:</p><pre class="crayon-plain-tag">local function trim( str )
    return (str:gsub("^%s*(.-)%s*$", "%1"))
end</pre><p>So let&#8217;s add this function to the <code>'string.*'</code> API. In <code>"utils.lua"</code> after we define our function we follow it with a standard table value assignment (this is the magic bit):</p>
<p><code>string.trim = trim</code></p>
<p>And that&#8217;s it. Easy.</p>
<p>You can now call <code>'string.trim(" Hello World! ")'</code> from anywhere in your code and it will print:</p>
<p><code>Hello World!</code></p>
<h3>The Beauty of a Library</h3>
<p>Let&#8217;s say we have a string defined:</p>
<p><code>local str = " Hello World! "</code></p>
<p>What&#8217;s great about having the <code>'trim()'</code> function in the string API is that we can now call the function as a member of any string variable:</p>
<p><code>print( str:trim() )</code></p>
<p>Will output:</p>
<p><code>Hello World!</code></p>
<p>This is because the <code>'string'</code> library represents string variables in general.</p>
<p>It&#8217;s important to note, that this does not add your trim function to everyone&#8217;s Corona <code>string.*</code> library nor will it make it available to your next project. You will need to continue require your <code>util.lua</code> file. But the idea here that:</p>
<p><code>string.trim()</code></p>
<p>makes more semantical sense than:</p>
<p><code>util.trim()</code></p>
<p>Hopefully this simple trick will make your development with Corona a bit more easy.</p>
]]></content:encoded>
			</item>
		<item>
		<title>I have a question where should I ask it?</title>
		<link>/blog/2019/04/24/i-have-a-question-where-should-i-ask-it/</link>
		<pubDate>Wed, 24 Apr 2019 22:12:57 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Corona SDK]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=76261</guid>
		<description><![CDATA[Many Corona users can be successful with just our API docs and guides, but what if you need more help? Where should you turn to?]]></description>
				<content:encoded><![CDATA[<p><img src="/wordpress/wp-content/uploads/2012/04/community-icons_Forum.png" alt="" width="99" height="69" class="alignright size-full wp-image-13766" />It seems like we are seeing the same questions showing up in multiple places. We want you to get the best support possible and understanding the best places to ask your questions will help meet that goal.</p>
<p>Support requests can be generally broken into three distinct categories:</p>
<ol>
<li>How do I use Corona?</li>
<li>I&#8217;m having an account related issue.</li>
<li>Letting people know about cool things you&#8217;re using Corona for.</li>
</ol>
<p>There are several support channels available for you:</p>
<ol>
<li>
<a href=https://forums.coronalabs.com/ rel="noopener" target="_blank">The Community Forums</a></li>
<li>
Emailing <a href=mailto:support@coronalabs.com rel="noopener" target="_blank">support@coronalabs.com</a></li>
<li>
<a href=/slack/ rel="noopener" target="_blank">The Community Slack</a></li>
<li>
Social Media like Facebook, Twitter, Stack Overflow, Reddit, etc.</li>
<li>
Private messages on all of the above channels</li>
</ol>
<h3>Which should I use?</h3>
<p><strong>If you have account related questions</strong>, or a plugin license issue or anything where we need something private (an email address, credit card or we need to reset your password) then emailing <a href=mailto:support@coronalabs.com rel="noopener" target="_blank">support@coronalabs.com</a> is the proper choice. This helps keep your information safe.<br />
<strong><br />
If you have any questions about the product</strong> and in particular if code needs to be shared to help answer your question, you should always use the forums. While forums may seem SO 2000&#8217;s, they provide you with some very important features that not only benefit you, but also benefit the community:</p>
<ol>
<li>You have access to developers from around the world to get your answers. You will usually get answers faster than waiting for the Corona Staff to be online.</li>
<li>The forums are a great knowledge base because it&#8217;s searchable. You can search the forums (or use Google since it indexes the forum posts) for your question before you ask and get an answer right away. If your question can&#8217;t be found, then ask. Once answered, other developers when they have your question can find your answer. This concept is so important, that we specifically discourage 1 on 1 messages to support.</li>
<li>Many questions relate to how to do things like make a character jump or spawn monsters in an RPG. These questions are best answered by people who are using the product, not building the product. We are great at answering questions about how a particular API works, but when it comes to game mechanics, our community developers are the best!</li>
</ol>
<p>It should be noted that the first time you post to the forums, it will be held until our staff can review it to make sure it&#8217;s not spam. It make take several hours before the staff can review the new posts and approve them. Once your first post is approved, other posts will show up instantly.</p>
<p>If you have an awesome game or tool that the community will probably enjoy, let them know everywhere, except to support. Post it on Slack, Twitter, Facebook, Reddit&#8217;s <a href=https://www.reddit.com/r/gamedev/ rel="noopener" target="_blank">/r/gamedev</a> and <a href=https://www.reddit.com/r/CoronaSDK/ rel="noopener" target="_blank">/r/CoronaSDK</a>. It won&#8217;t do much good to email it to support@coronalabs.com or on any private channels, since we will see it on the other channels.</p>
<p>Just a couple of other side notes. If you have a confirmed bug, hopefully after trying to solve the issue in the Forums, please use the <a href=https://developer.coronalabs.com/content/bug-submission rel="noopener" target="_blank">&#8220;Report a bug&#8221; link</a> at the top of the Forums page. If you see an issue with our documentation, there is a Report an Issue link at the bottom of the page. Please do not use these to ask for support or help. Use them only for confirmed problems.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Using functions for onComplete listeners</title>
		<link>/blog/2019/04/10/using-functions-for-oncomplete-listeners/</link>
		<pubDate>Wed, 10 Apr 2019 15:33:11 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=76250</guid>
		<description><![CDATA[While Corona's APIs are well thought out and Lua makes programming easy, there are still times that somethings are not quite as obvious to new developers. In this "Gotcha" post, we examine the difference between calling functions and passing functions as parameters.]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-thumbnail wp-image-62993" src="/wordpress/wp-content/uploads/2015/06/code-feature-150x150.png" alt="" width="150" height="150" srcset="/wordpress/wp-content/uploads/2015/06/code-feature-150x150.png 150w, /wordpress/wp-content/uploads/2015/06/code-feature.png 250w" sizes="(max-width: 150px) 100vw, 150px" />Corona API&#8217;s are some of the best thought out in the industry. We&#8217;ve worked hard to make them consistent and easy to use. Lua follows a similar thought process, attempting to be consistent with minimal syntax rules. But there are times that some concepts may not be obvious to newer developers coming to a new language and API ecosystem.</p>
<p>Recently a problem discussed in the forums falls into one of these &#8220;<em>Gotcha</em>&#8221; categories.</p>
<h4>Calling functions vs. providing an address to a function</h4>
<p>Let&#8217;s look at a basic Corona API, the <a href=https://docs.coronalabs.com/api/library/timer/performWithDelay.html target="_blank" rel="noopener">timer.performWithDelay()</a> API. This function requires two parameters and an optional third parameter. Let&#8217;s look at its definition:</p><pre class="crayon-plain-tag">timer.performWithDelay( delay, listener [, iterations] )</pre><p>The first parameter, <code>delay</code> is the time in milliseconds before the function passed as the <code>listener</code> fires. Finally, you can set a number of times for this to run. At its basic nature, you want to wait some period of time before <code>listener</code> runs.</p>
<p>Lets create a simple listener function for this example:</p><pre class="crayon-plain-tag">local function myListener( value )
     print( "timer fired", value )
end</pre><p>It simply prints that the timer to the console log with a value. Your code could now look like:</p><pre class="crayon-plain-tag">local myValue  = 10
print( "timer start" )
timer.performWithDelay( 5000, myListener( myValue ) )</pre><p>You would expect to see in your console log that the message <strong>&#8220;timer start&#8221;</strong> show up, then 5 seconds later, you would expect to see <strong>&#8220;timer fired&#8221;</strong>. But if you run this code, you will see the two messages print simultaneously with no delay.</p>
<p>What happened?</p>
<p>In Lua, and many other languages, there are two needs:</p>
<ol>
<li>Call the function</li>
<li>Get the functions memory address</li>
</ol>
<p>In the case of Corona APIs that expect a function passed to it, or an <code>onComplete</code> option on functions like <a href=https://docs.coronalabs.com/api/library/audio/play.html target="_blank" rel="noopener">audio.play()</a> or <a href=https://docs.coronalabs.com/api/library/transition/to.html target="_blank" rel="noopener">transition.to()</a>, Corona is expecting an &#8220;<em>address to a function</em>&#8220;. When you call a function, it executes immediately and returns a value or nil if your function doesn&#8217;t return a value.</p>
<h4>How you do &#8220;<em>call a function</em>&#8221; vs &#8220;<em>get a function&#8217;s address</em>&#8220;</h4>
<p>It&#8217;s pretty simple, if you put parentheses after the function name, it runs the function. If you leave off the parentheses, you get the address to the function.</p>
<p>So in our example above, since we included <code>myListener( value )</code>, the function returns immediately and returns any return value. So we get the message from <code>myListener()</code> and the resulting timer call is compiled as:</p><pre class="crayon-plain-tag">timer.performWithDelay( 5000, nil )</pre><p>Since <code>myListener()</code> doesn&#8217;t return a value, a nil is returned. Then 5 seconds later, <code>timer.performWithDelay()</code> tries to run nothing. To make this work, you have to pass the address to the function. You do this by leaving off the parenthesis and not passing any parameters:</p><pre class="crayon-plain-tag">timer.performWithDelay( 5000, myListener  )</pre><p>Now after 5 seconds, <code>myListener()</code> will be called, the message will print as expected.</p>
<p>You&#8217;re probably noticing that the value never gets passed in this way. This is how Corona works. You can&#8217;t pass values without using the (), which runs the function immediately. There is an easy way to address this using <em>anonymous functions</em>, but that will be a topic for another day.</p>
<p>Just remember if you&#8217;re providing a function to an <code>onComplete</code> parameter or a function to a listener, you have to pass the <em>address</em> of the function.</p>
<p><strong>Dream! Build! Ship!</strong></p>
]]></content:encoded>
			</item>
		<item>
		<title>Adding speech recognition to HTML5 apps</title>
		<link>/blog/2019/02/06/adding-speech-recognition-to-html5-apps/</link>
		<pubDate>Wed, 06 Feb 2019 16:35:27 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Plugins]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=76237</guid>
		<description><![CDATA[We have created a demo project showing how to implement JavaScript plugins in HTML5. Check out this Web Speech API implemented with Corona!]]></description>
				<content:encoded><![CDATA[<p>Corona&#8217;s plugin system provides a great <a href=https://docs.coronalabs.com/guide/html5/plugins/index.html>way</a> to extend Corona&#8217;s capabilities without having to modify Corona&#8217;s core engine. Developers building HTML5 apps have great access to JavaScript to add really cool features and it&#8217;s pretty easy to do!</p>
<p>Let&#8217;s look at an example…</p>
<p>Recently someone was interested in adding support for speech recognition for their HTML5 apps. We have created a demo that shows how to do just that in Chrome using the <a href=https://w3c.github.io/speech-api/speechapi.html target="_blank" rel="noopener">Web Speech API</a>.</p>
<p>It serves as a great example of how to integrate JavaScript APIs into your HTML5 builds. <a href=https://gist.github.com/Shchvova/a9b5b22c831f312d6f924c178e857b39 target="_blank" rel="noopener">Check it out</a>!</p>
<p>You can also view a live demo of this plugin <a href=https://vlad-test.s3.amazonaws.com/WebkitSpeech/index.html target="_blank" rel="noopener">in action here</a>! You will need Google Chrome to view the demo.</p>
<div class="align-wrap" style="text-align: center; margin-top: 35px; margin-bottom: 35px;">
<p><a class="btn btn_cta btn-lg btn-solid base_clr_bg" href=https://gist.github.com/Shchvova/a9b5b22c831f312d6f924c178e857b39 target="_blank" rel="noopener">Learn more about the Web Speech Plugin</a></p>
</div>
<style>
.btn_cta { border-color: #f96f29; background-color: #f96f29; color: #fff !important; padding:15px;}<br /></style>
]]></content:encoded>
			</item>
		<item>
		<title>Monetization best practices (and a new Ad Tutorial!)</title>
		<link>/blog/2018/10/02/monetization-best-practices-and-a-new-ad-tutorial/</link>
		<pubDate>Tue, 02 Oct 2018 18:53:31 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Monetization]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=76032</guid>
		<description><![CDATA[Do you want to implement ads in your game or app but don't know where to start? We have a tutorial for you and a blog post that helps you understand monetization. Check it out!]]></description>
				<content:encoded><![CDATA[<h3>New tutorial!</h3>
<p>First, we would like to take this opportunity to let you know about a new tutorial on implementing advertising in your Corona apps. The tutorial covers code and common code to implement an ad plugin in your app. You can <a href=https://docs.coronalabs.com/tutorial/basics/ads/index.html target="_blank" rel="noopener">view it here</a>!</p>
<div class="align-wrap" style="text-align: center; margin-top: 35px; margin-bottom: 35px;">
<p><a class="btn btn_cta btn-lg btn-solid base_clr_bg" href=https://docs.coronalabs.com/tutorial/basics/ads/index.html target="_blank" rel="noopener">Read the Implementing Ads tutorial</a></p>
</div>
<style>
.btn_cta { border-color: #f96f29; background-color: #f96f29; color: #fff !important; padding:15px;}<br /></style>
<h3>Monetization best practices</h3>
<p>A great question was asked in our Community Forums about using in-app purchases (IAP) to turn off advertising. It may seem like a simple idea but there is more to it.</p>
<p>When you sell your app for a fixed price, that person pays you once, ever. When you use ads, you get a continuous stream of income as long as your app or game is being used. If someone uses IAP to turn off ads, you get continuous income until they pay for the IAP, then you get the one-time fee and that&#8217;s it. For some apps, IAP subscriptions can provide ongoing income, but an app has to be pretty special, with lots of new content to convince users to continuously pay for it.</p>
<p>Let&#8217;s look at the financial considerations in answering this question. Let&#8217;s say that you end up setting the IAP fee to turn off ads at $0.99 (or an initial purchase price with no ads). Because the app stores take 30% of your sales, that means you will make $0.69 from that user when they make the purchase. But the question is: Will you make more from advertising?</p>
<p>Using Appodeal as an example and information from <a href=https://www.appodeal.com/home/monetizing-casual-games/ target="_blank" rel="noopener">Appodeal&#8217;s E-Book &#8220;Monetizing Casual Games&#8221;</a>, banner ads typically pay about $0.43 per thousand banner ads shown. To earn that same $0.69 from app sales, you need to display over 1,600 banner ads to your app user. Assuming your banner ads rotate every 45 seconds, it will take over 1,200 minutes or about 20 hours of view time to earn that same amount of money from the user. Note: eCPM values for the United States and Europe were averaged together from numbers in the e-Book.</p>
<p>Banner ads may not be the best way to implement ads. If you&#8217;re using other ad forms, like interstitials which pay an average of $4.59 per thousand ads, you need to show about 150 interstitial ads to earn the equivalent purchase income. Note, video interstitials pay more than static interstitial ads. Let&#8217;s say you can show 2 interstitial ads per session on average, the user only has to play about 75 times to make up that income. You don&#8217;t want to over-show ads to keep it from becoming an annoyance causing your user to just quit your app.</p>
<p>Rewarded video pays about $10 per 1000 rewarded videos. That means the user only needs to view 7 rewarded videos to earn you that same $0.69.</p>
<p>How do you get to that many ad displays? Most users tend to play a game a lot at first, then over time, they play less and less. All games have a usage &#8220;tail&#8221;. If you view this generic usage graph, it looks like a dinosaur:</p>
<div id="attachment_76033" style="width: 1034px" class="wp-caption alignnone"><img src="/wordpress/wp-content/uploads/2018/10/1200px-Long_tail.svg-1024x532.png" alt="" width="1024" height="532" class="size-large wp-image-76033" srcset="/wordpress/wp-content/uploads/2018/10/1200px-Long_tail.svg-1024x532.png 1024w, /wordpress/wp-content/uploads/2018/10/1200px-Long_tail.svg-300x156.png 300w, /wordpress/wp-content/uploads/2018/10/1200px-Long_tail.svg-768x399.png 768w, /wordpress/wp-content/uploads/2018/10/1200px-Long_tail.svg-700x364.png 700w, /wordpress/wp-content/uploads/2018/10/1200px-Long_tail.svg-125x65.png 125w, /wordpress/wp-content/uploads/2018/10/1200px-Long_tail.svg.png 1200w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">Picture by <a href=http://www.haykranen.nl/ target-"_blank">Hay Kranen</a> / PD</p></div>
<p>The left side is your initial usage spike (the head) and then as time passes it gets used less and less (the tail). Some games will have a long tail, but many will have a short tail. No one can really predict in advance how long your game&#8217;s tail will be. Successful apps will have a longer tail and a taller tail. It indicates that you are retaining users longer. Games and apps with a long tail will make more money from advertising. If your game doesn&#8217;t have any longevity to it, you want to convert them to paid as soon as possible.</p>
<p>This combination of retention and revenue is your game&#8217;s LTV or Lifetime Value.</p>
<p>If your game is too short, offering an option to disable ads won&#8217;t be effective because you won&#8217;t have any retention to motivate them to disable ads. If your ads are too annoying, people may get turned off to your app and give up on it early. You have to strike a proper balance between advertising and entertainment or utility value of your app.</p>
<p>Even short-lived apps can monetize successfully by &#8230;</p>
<h3>Using Rewarded Video</h3>
<p>Rewarded video is clearly the winner in the eCPM value for you, but you have to use them wisely. Rewarded video is the user volunteering their time in exchange for some in-game reward. You can&#8217;t just throw a rewarded video in front of a user automatically. That&#8217;s the job of an interstitial ad. If you force the user to watch an ad, even if you reward them, it&#8217;s still forcing them to watch the ad.</p>
<p>Consider they have played your level and lost. Your game logic shows them an ad and resets back to the beginning. That is an Interstitial ad placement. If you prompt them &#8220;Would you like to view an ad to continue to the next level?&#8221; and if they agree, you should show them the video and let them move on to the next level. If they choose no, simply take them back to the beginning, but don&#8217;t force them to watch the ad.</p>
<p>Rewarded ads encourage players to continue playing, either by not losing progress or by gaining some in-game feature which can extend your app&#8217;s LTV. Using these techniques, even games with shorter tails can be quite successful.</p>
<h3>Conclusion</h3>
<p>Every app is different. You should make the most entertaining game you can or the most useful business or utility app that brings real value to the user, then balance your advertising, in-app purchases and in-app currency to maximize your income.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Understanding Content Scaling in Corona</title>
		<link>/blog/2018/08/08/understanding-content-scaling-in-corona/</link>
		<pubDate>Wed, 08 Aug 2018 22:18:40 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Game Development]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=75928</guid>
		<description><![CDATA[Tired of black bars on the sides of your app? Struggling with positioning objects? A better understanding of Corona's content scaling may help!]]></description>
				<content:encoded><![CDATA[<p><a href=https://docs.coronalabs.com/guide/basics/configSettings/index.html?#contentscaling target="_blank" rel="noopener">Content scaling</a> can be a mystery even for some seasoned developers. Let&#8217;s try to demystify it.</p>
<p>First, forget pixels. You are going to create a virtual content area that is measured in values that make sense for you to use. Your content area could be 1 x 1 if you want. Of course to position something on the screen you would need to use fractional values, which is probably pretty inconvenient. You could match your content area to some device standards like a width of 1080 and a height of 1920. This would provide a 1 to 1 mapping to the typical HDTV screen or computer monitor which also happens to be a common device resolution for many modern phones. This is all defined in the <a href=https://docs.coronalabs.com/guide/basics/configSettings/index.html target="_blank" rel="noopener">config.lua</a> file.</p>
<h3><code>config.lua</code> is always written assuming a portrait orientation</h3>
<p>That is, your width should always be the smaller value and the height the larger value that you specify, even if your game/app is going to run in landscape mode.</p>
<h3>Aspect ratios</h3>
<p>You shouldn&#8217;t care about pixels. Corona converts your &#8220;<strong>content area points</strong>&#8221; to pixels for you. You only need to care about what number of points you want to work with. However, aspect ratio matters. If you set your width and height to both be 1000, then you have a 1:1 aspect ratio, the width and height are the same. If you set your width to 1000 and height to 1500 then you have a 1:1.5 aspect ratio.</p>
<h3>There are many standard aspect ratios that are common among displays:</h3>
<p><strong>1:1.5</strong> &#8211; Common to the iPhone 3 and 4 family, cameras produce 4&#215;6 photos (which is 2:3 or 1:1.5), some laptop screens are 1:1.5 as well.</p>
<p><strong>3:4</strong> &#8211; Common to Standard def TV and computer monitors such as 1024&#215;768, the Apple iPad and several Android tablets. This is also 1:1.33.</p>
<p><strong>16:9</strong> &#8211; This is the HDTV standard or 720p (1280&#215;720) or 1080p (1920&#215;1080). This is very common to many modern phones too. This works out to 1:1.777778 if you want to measure it based on a 1 point scale.</p>
<h3>Which aspect ratio should you use?</h3>
<p>Corona Labs recommends that you use the 2:3 or 1:1.5 aspect ratio. While this is common on older phones, using 16:9 may make more sense, however if you want to build apps that work both on more square iPads/tablets as well as more rectangular 16:9 or more extreme devices, the 1:1.5 aspect ratio fits nicely on all devices. Of course this means that you&#8217;re going to have extra screen space to use that is outside of your defined content area.</p>
<p>It&#8217;s important to point out there is no &#8220;perfect&#8221; or &#8220;right&#8221; way to define the content area. You need to use what works for you and it may vary from app to app. This is recommended because it fits on all screens.</p>
<p>In the graphic below, green is your defined content area in <code>config.lua</code> (based on a 1:1.5 aspect ratio). Blue is the typical 16:9 device, pink is the typical iPad/tablet.</p>
<p><img class="alignnone size-large wp-image-75929" src="/wordpress/wp-content/uploads/2018/08/apspectratios-1024x768.jpg" alt="" width="1024" height="768" srcset="/wordpress/wp-content/uploads/2018/08/apspectratios.jpg 1024w, /wordpress/wp-content/uploads/2018/08/apspectratios-300x225.jpg 300w, /wordpress/wp-content/uploads/2018/08/apspectratios-768x576.jpg 768w, /wordpress/wp-content/uploads/2018/08/apspectratios-800x600.jpg 800w, /wordpress/wp-content/uploads/2018/08/apspectratios-700x525.jpg 700w, /wordpress/wp-content/uploads/2018/08/apspectratios-125x94.jpg 125w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<h3>Does width and height matter?</h3>
<p>You should use what works best for you. But you will see that many Corona-produced samples seem to be stuck on an archaic <strong>320</strong> width and <strong>480</strong> height setting. This has not been a pixel match to any device since the iPhone 3 which makes it very old indeed. However, Apple still measures everything in points and they are using a 320 point base system. Android devices are based off of a 160dpi system so a 2&#8243; widescreen, common to phones would be 320 as well. Finally Corona&#8217;s widget library is based on a 320 point system and many of the widgets are not designed to work with arbitrary sizes, so we continue to use 320&#215;480. You should use what&#8217;s right for you, but 320&#215;480 is a pretty good standard to base your app on.</p>
<h3>Aligning the content area</h3>
<p>By default, Corona will center your content area on the screen for you. This is the common use case for most games. You can use the <code>xAlign</code> and <code>yAlign</code> properties to change the default. For instance, if you&#8217;re making a portrait business app, it might make more sense for the very left, top spot on the screen be 0, 0 and you fill content down the page. These apps don&#8217;t do a lot of centering and having left, top be 0, 0 and right, bottom be <a href=https://docs.coronalabs.com/api/library/display/actualContentWidth.html target="_blank" rel="noopener">display.actualContentWidth</a>, <a href=https://docs.coronalabs.com/api/library/display/actualContentHeight.html target="_blank" rel="noopener">display.actualContentHeight</a> makes that simple.</p>
<p>Games come in two basic configurations:</p>
<ol>
<li>Objects have to be the same distance apart regardless of the screen. Think about Angry Birds. The distance from the sling shot to the structure has to be the same on every device for the gameplay to be consistent. Space to the left of the sling shot or to the right of the structure is just filler. In this scenario having a centered content area makes sense.</li>
<li>Objects should fill the screen and spacing isn&#8217;t critical. Think of a card game. The stacks of cards look best when they are spread out to fill the screen. In this case, you may want to left-align the content area and use <a href=https://docs.coronalabs.com/api/library/display/actualContentWidth.html target="_blank" rel="noopener">display.actualContentWidth</a> to determine how to balance your card stacks out.</li>
</ol>
<h4>Corona&#8217;s display attributes</h4>
<p>There are several important values you can get in your Corona app based on your settings in config.lua:</p>
<ul>
<li><a href=https://docs.coronalabs.com/api/library/display/contentWidth.html target="_blank" rel="noopener">display.contentWidth</a> = the value you set for &#8220;width&#8221; in <code>config.lua</code></li>
<li><a href=https://docs.coronalabs.com/api/library/display/contentHeight.html target="_blank" rel="noopener">display.contentHeight</a> = the value you set for &#8220;height&#8221; in <code>config.lua</code></li>
<li><a href=https://docs.coronalabs.com/api/library/display/actualContentHeight.html target="_blank" rel="noopener">display.actualContentHeight</a> = a computed value based on your width/height but adjusted for your screen&#8217;s aspect ratio. For instance if your portrait app has a height of 480, but you&#8217;re on a 16:9 device, <code>display.actualContentHeight</code> would be 568 (16/9 * 320)</li>
<li><a href=https://docs.coronalabs.com/api/library/display/actualContentWidth.html target="_blank" rel="noopener">display.actualContentWidth</a> = a computed value based on your width/height but adjusted for the screen&#8217;s aspect ratio. For instance an iPad would return 360 for a portrait app (3 / 4 * 480)</li>
<li><a href=https://docs.coronalabs.com/api/library/display/screenOriginX.html target="_blank" rel="noopener">display.screenOriginX</a>, <a href=https://docs.coronalabs.com/api/library/display/screenOriginY.html target="_blank" rel="noopener">display.screenOriginY</a> = for a centered content area and a bigger screen, some of the extra area will be to the left or to the top of the content area. These values provide you that offset</li>
</ul>
<p>These values are important for positioning their objects around the edges of your screen or to fill your screen.</p>
<p>Consider this image:</p>
<p><img class="alignnone size-large wp-image-75931" src="/wordpress/wp-content/uploads/2018/08/apspectratiosWithAnnotations-1024x685.jpg" alt="" width="1024" height="685" srcset="/wordpress/wp-content/uploads/2018/08/apspectratiosWithAnnotations-1024x685.jpg 1024w, /wordpress/wp-content/uploads/2018/08/apspectratiosWithAnnotations-300x201.jpg 300w, /wordpress/wp-content/uploads/2018/08/apspectratiosWithAnnotations-768x514.jpg 768w, /wordpress/wp-content/uploads/2018/08/apspectratiosWithAnnotations-700x468.jpg 700w, /wordpress/wp-content/uploads/2018/08/apspectratiosWithAnnotations-125x84.jpg 125w, /wordpress/wp-content/uploads/2018/08/apspectratiosWithAnnotations.jpg 1148w" sizes="(max-width: 1024px) 100vw, 1024px" />Given this config.lua:</p><pre class="crayon-plain-tag">application =
{
    content =
    {
        width = 320,
        height = 480,
        scale = "letterbox",
        fps = 60,
    },
}</pre><p>You are creating a centered content area (the green block). The blue area would be the typical 16:9 phone such as an iPhone 5 family. We will discuss the yellow block in a little bit.</p>
<p>0, 0 is the left, top corner of your defined content area. Your right, bottom corner is <code>display.contentWidth</code>, <code>display.contentHeight</code>. Both of these are exactly what you specified in <code>config.lua</code>. Corona will fill the screen either vertically or horizontally depending on the aspect ratio of the device. For phones, the 320 will fill the narrow width of the device. For tablets, the 480 will fill the device. The other value is computed based on the actual device. These values then become <code>display.actualContentWidth</code> and <code>display.actualContentHeight</code>.</p>
<p>Corona also automatically adjusts these values based on your device&#8217;s orientation. The <code>config.lua</code> is always written for portrait, so on a portrait app, 320 width will be 320 (or 360 for iPads). If you rotate the device, the narrow edge of the phone is now the height instead of the width. Corona adjusts these attributes to match the orientation automatically.</p>
<p>Back to the graphic above, you will notice that there are blue areas on the left and right of the display. That&#8217;s because the content area is 480 points, but the actual screen is 568 points, an 88 point difference. Since the area is centered, that means there are 44 points left of 0, 0 and 44 points of screen to the right of your defined height.</p>
<p>Corona makes getting the left edge in this case very easy. The <code>display.screenOriginX</code> will in this case be -44 and <code>display.screenOriginY</code> will be 0. Flip the device to portrait and <code>display.screenOriginY</code> would be -44 and <code>display.screenOriginX</code> would be 0. If you want to position a button in the left, top of the display 25 points from the edge, you could do:</p><pre class="crayon-plain-tag">button.x = 25 + display.screenOriginX
button.y = 25 + display.screenOriginY</pre><p>Getting to the right side in this example is a little bit tricker. While <code>display.actualContentWidth</code> will return 568, which is the actual width of the content area, with the content area being centered, it will be 44 pixels too far to the right. To position a button at the right, bottom, you still have to use the <code>display.screenOrigin*</code> values:</p><pre class="crayon-plain-tag">button.x = display.actualContentWidth - 25 + display.screenOriginX
button.y = display.actualContentHeight - 25 + display.screenOriginY</pre><p>For your game critical items that need to be at predictable distances for each other, keep them inside the 0, 0 and <code>display.contentWidth</code>, <code>display.contentHeight</code> area and it will work on all devices. Then you can fill the background to fill the full screen and edge position scores, lives, User Interface (UI) buttons and such so they also fill the screen.</p>
<h3>iPhone X weirdness</h3>
<p>Apple introduced some features with the iPhone X that makes laying out your app a bit of a challenge. Corona has some alternate versions of <code>display.screenOriginX</code>, <code>display.screenOriginY</code>, <code>display.actualContentWidth</code>, <code>display.actualContentHeight</code> that takes these changes into account. If you plan on supporting the iPhone X, you should use <a href=https://docs.coronalabs.com/api/library/display/safeScreenOriginX.html target="_blank" rel="noopener">display.safeScreenOriginX</a>, <a href=https://docs.coronalabs.com/api/library/display/screenOriginY.html target="_blank" rel="noopener">display.safeScreenOriginY</a>, <a href=https://docs.coronalabs.com/api/library/display/safeActualContentWidth.html target="_blank" rel="noopener">display.safeActualContentWidth</a>, and <a href=https://docs.coronalabs.com/api/library/display/safeActualContentHeight.html target="_blank" rel="noopener">display.safeActualContentHeight</a> for positioning UI elements into the safe zone. But you should still use the non-safe versions for filling the background.</p>
<h3>Filling the background</h3>
<p>Consider this game&#8217;s UI:</p>
<p><img class="alignnone size-large wp-image-75933" src="/wordpress/wp-content/uploads/2018/08/gameUI-1024x577.jpg" alt="" width="1024" height="577" srcset="/wordpress/wp-content/uploads/2018/08/gameUI.jpg 1024w, /wordpress/wp-content/uploads/2018/08/gameUI-300x169.jpg 300w, /wordpress/wp-content/uploads/2018/08/gameUI-768x433.jpg 768w, /wordpress/wp-content/uploads/2018/08/gameUI-700x394.jpg 700w, /wordpress/wp-content/uploads/2018/08/gameUI-539x303.jpg 539w, /wordpress/wp-content/uploads/2018/08/gameUI-125x70.jpg 125w" sizes="(max-width: 1024px) 100vw, 1024px" />This simple interface has a health indicator, lives indicator, score indicator and some other buttons along the bottom edge. The red ship is inside the <code>config.lua's</code> defined content area.</p>
<p>When making your background, you want to try and use graphics that can extend beyond the screen edges. Then for the UI elements, don&#8217;t build them into the background, but have them be their own graphics so they can be edge positioned to fill the visible screen. Then you can draw your hearts, bars and score values inside those graphics.</p>
<p>Before Samsung came out with the S8 and S9 and Apple the iPhone X, the most extreme screen was the 16:9 screens and the iPads (in the other direction). This made it a very easy formula for filling the background. Based on a 320&#215;480 content area, you would want your backgrounds to be 360&#215;570 for portrait or 570&#215;360 for landscape. Center it on the screen and you would have no black &#8220;<code>letterbox</code>&#8221; bars to contend with. The S8 and S8 are a 1:2 aspect ratio which means your backgrounds need to be 640&#215;360 to fully fill the screen. Then Apple went even more extreme with the iPhone X and its 19.5:9 aspect ratio (a 1:2.1666667 screen). You will need a 694 pixel wide image to fill the background on this device.</p>
<p>Hopefully this will help you understand the config.lua a little better and propel you to success in your next <a href=https://twitter.com/search?q=%23madewithcorona target="_blank" rel="noopener">#madewithcorona</a> app!</p>
]]></content:encoded>
			</item>
		<item>
		<title>Making HTML5 plugins for Corona</title>
		<link>/blog/2018/03/22/making-html5-plugins-for-corona/</link>
		<pubDate>Thu, 22 Mar 2018 17:01:28 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=75515</guid>
		<description><![CDATA[HTML5 opens up some exceptional opportunities including your ability to extend the platform with plugins. This post will get you started.]]></description>
				<content:encoded><![CDATA[<p><img class="alignright size-thumbnail wp-image-56850" src="/wordpress/wp-content/uploads/2014/03/HTML5_Badge_512-150x150.png" alt="" width="150" height="150" srcset="/wordpress/wp-content/uploads/2014/03/HTML5_Badge_512-150x150.png 150w, /wordpress/wp-content/uploads/2014/03/HTML5_Badge_512-300x300.png 300w, /wordpress/wp-content/uploads/2014/03/HTML5_Badge_512-500x500.png 500w, /wordpress/wp-content/uploads/2014/03/HTML5_Badge_512.png 512w" sizes="(max-width: 150px) 100vw, 150px" />HTML5 opens up some great opportunities for developers and one of those is plugin development using JavaScript.</p>
<p>While most Corona developers will only use Lua in a cross-platform manner like they are currently using, it&#8217;s super easy to add JavaScript features to extend your app.</p>
<p>To learn about making plugins for HTML5, please review <a href=http://docs.coronalabs.com/guide/html5/plugins/?#example target="_blank" rel="noopener">our HTML5 documentation&#8217;s plugin</a> section.</p>
<p>If you have questions please reach out on <a href=https://forums.coronalabs.com/forum/637-html5/ target="_blank" rel="noopener">our HTML5 forum</a>!</p>
]]></content:encoded>
			</item>
		<item>
		<title>Programming Guide For Video-Gamers</title>
		<link>/blog/2018/02/20/programming-guide-for-video-gamers/</link>
		<pubDate>Tue, 20 Feb 2018 16:56:15 +0000</pubDate>
		<dc:creator><![CDATA[Rob Miracle]]></dc:creator>
				<category><![CDATA[Design]]></category>
		<category><![CDATA[News & Announcements]]></category>
		<category><![CDATA[Tutorials, Tips and Demos]]></category>

		<guid isPermaLink="false">/?p=73348</guid>
		<description><![CDATA[There are some great game development resources on the Internet. This is one page you might want to bookmark.]]></description>
				<content:encoded><![CDATA[<p><img src="/wordpress/wp-content/uploads/2010/07/GameEdition512-150x150.png" alt="" width="150" height="150" class="alignright size-thumbnail wp-image-1384" srcset="/wordpress/wp-content/uploads/2010/07/GameEdition512-150x150.png 150w, /wordpress/wp-content/uploads/2010/07/GameEdition512-300x300.png 300w, /wordpress/wp-content/uploads/2010/07/GameEdition512-500x500.png 500w, /wordpress/wp-content/uploads/2010/07/GameEdition512.png 512w" sizes="(max-width: 150px) 100vw, 150px" />There are some great resources available on the Internet for just about everything. Making computer games is no exception. Sometimes we come across a great resource that we think you might benefit from. </p>
<p>The site <a href=http://ithare.com/ rel="noopener" target="_blank">IT Hare</a> offers up their <a href=http://ithare.com/programming-guide-for-video-gamers/ rel="noopener" target="_blank">Programming Guide For Video-Gamers</a>. This guide contains links/bookmarks to many other resources for game making, broken into development topics and career topics.</p>
<p>Thanks to <strong>Sarah A.</strong> from San Diego, CA, an aspiring game developer, for finding this resource for us. It&#8217;s a great example of the community helping each other. If you come across great resources that would benefit our community just drop an email to support AT coronalabs.com.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>
